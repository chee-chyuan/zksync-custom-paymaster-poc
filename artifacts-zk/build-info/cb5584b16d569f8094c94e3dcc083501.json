{"id":"cb5584b16d569f8094c94e3dcc083501","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"","input":{"language":"Solidity","sources":{"contracts/MyCustomPaymaster.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\nimport { IPaymaster, ExecutionResult } from '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol';\nimport { IPaymasterFlow } from '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol';\nimport { TransactionHelper, Transaction } from '@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol';\nimport '@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol';\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract CustomPaymaster {\n\n    address public constant BOOTLOADER = BOOTLOADER_FORMAL_ADDRESS;\n    address public constant ENTRY_POINT = BOOTLOADER;\n    mapping(address => bool) public whiteListedErc20s;\n    mapping(address => bool) public blackListUsers;\n    mapping(address => bool) public admins;\n\n    error NotImplemented();\n\n    constructor(address _admin) {\n        admins[_admin] = true;\n    }\n\n    function getTokenRateFromEth(address erc20TokenAddr, uint256 ethAmount)\n        public\n        returns (uint256)\n    {\n        // could be something that the paymaster sets\n        // could be from a reliable oracle\n        // or could be based on the exchange rate of a dex\n\n        return ethAmount * 5; // temp value\n    }\n\n    function getTokenRateToEth(address erc20TokenAddr, uint256 tokenAmount)\n        public\n        returns (uint256)\n    {\n        return tokenAmount / 5; // temp value\n    }\n\n    function paymasterFee(uint256 requiredEth) public returns (uint256 fee) {\n        return 0;\n    }\n\n    function validateAndPayForPaymasterTransaction(\n        Transaction calldata _transaction\n    ) external payable returns (bytes memory context) {\n        require(msg.sender == BOOTLOADER, \"Not bootloader\");\n\n        require(\n            _transaction.paymasterInput.length >= 4,\n            \"The standard paymaster input must be at least 4 bytes long\"\n        );\n\n        // check paymaster input. we are checking for approved based selector\n        // this method is not actually callable, just a way for us to encode and decode data\n        bytes4 paymasterInputSelector = bytes4(\n            _transaction.paymasterInput[0:4]\n        );\n\n        if (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n            // While the actual data consists of address, uint256 and bytes data,\n            // the data is some arbitrary input that we may use\n            (address token, uint256 amount, ) = abi.decode(\n                _transaction.paymasterInput[4:],\n                (address, uint256, bytes)\n            );\n\n            // saving the current token to context\n            // context = bytes(token);\n            context = abi.encodePacked(token);\n\n            require(whiteListedErc20s[token], \"erc20 not supported\");\n\n            address userAddress = address(uint160(_transaction.from));\n            require(!blackListUsers[userAddress], \"user has been blocklisted\");\n\n            // - potentially check if transaction is allowed? (ie. do we want to approve user to perform this transaction)\n            //  - eg. lets say we only allow swapping in uniswap, we need to check if the transaction input is allowed\n            //  for poc, we allow all transactions\n\n            uint256 requiredETH = _transaction.ergsLimit *\n                _transaction.maxFeePerErg;\n\n            // paymaster charge fee for service\n            uint256 fee = paymasterFee(requiredETH);\n            requiredETH += fee;\n\n            // - swap to eth (dex?)\n            uint256 requiredToken = getTokenRateFromEth(token, requiredETH);\n\n            // - check approval\n            uint256 userAllowance = IERC20(token).allowance(userAddress, address(this));\n            // - check if eth is enough\n            require(userAllowance > requiredToken, \"not enough approval\");\n\n            // - pay all token to paymaster\n            IERC20(token).transferFrom(\n                userAddress,\n                address(this),\n                requiredToken\n            );\n\n            // - pay bootloader in eth\n            // bootloader will check if sufficient eth has been paid before execution\n            (bool success, ) = payable(BOOTLOADER).call{value: requiredETH}(\"\");\n            require(success, \"payment to bootloader fail\");\n        } else {\n            revert NotImplemented();\n        }\n    }\n\n    function postOp(\n        bytes calldata _context,\n        Transaction calldata _transaction,\n        ExecutionResult _txResult,\n        uint256 _maxRefundedErgs // actual gas cost without this postop // _maxRefundedErgs\n    ) external payable {\n        require(msg.sender == BOOTLOADER, \"Not entry point\");\n\n        // // implement refund logic\n        // // for now we always refund the token back to the user\n\n        // get rate of eth to token\n        address erc20TokenAddr = address(uint160(bytes20(_context)));\n\n        uint256 refundedToken = getTokenRateFromEth(\n            erc20TokenAddr,\n            _maxRefundedErgs * _transaction.maxFeePerErg\n        );\n\n        // repay sender the token\n        address userAddress = address(uint160(_transaction.from));\n        IERC20(erc20TokenAddr).transfer(userAddress, refundedToken);\n    }\n\n    // TODO: how to account for gas in the postOp?\n\n    /**\n     * allow eth to be transferred to this contract so that the paymaster can provide eth for users\n     */\n    receive() external payable {}\n\n    modifier onlyAdmin() {\n        require(admins[msg.sender], \"not admin\");\n        _;\n    }\n\n    function setAdmin(address _admin) external onlyAdmin {\n        require(_admin != address(this), \"this contract cannot be an admin\");\n        admins[_admin] = true;\n    }\n\n    function setWhitelistToken(address tokenAddr, bool isWhiteList) external onlyAdmin {\n        whiteListedErc20s[tokenAddr] = isWhiteList;\n    }\n\n    function withdrawToken(\n        address token,\n        address recipient,\n        uint256 amount\n    ) external onlyAdmin {\n        IERC20(token).transfer(recipient, amount);\n    }\n\n    function withdrawEth(address payable recipient, uint256 amount)\n        external\n        onlyAdmin\n    {\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success);\n    }\n\n    \n\n    // Staking\n    // add a paymaster stake (must be called by the paymaster)\n    // function addStake(uint32 _unstakeDelaySec) external payable\n\n    // // unlock the stake (must wait unstakeDelay before can withdraw)\n    // function unlockStake() external\n\n    // // withdraw the unlocked stake\n    // function withdrawStake(address payable withdrawAddress) external\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAccountCodeStorage.sol\";\nimport \"./interfaces/INonceHolder.sol\";\nimport \"./interfaces/IContractDeployer.sol\";\nimport \"./interfaces/IKnownCodesStorage.sol\";\nimport \"./interfaces/IImmutableSimulator.sol\";\nimport \"./interfaces/IEthToken.sol\";\nimport \"./interfaces/IL1Messenger.sol\";\nimport \"./SystemContext.sol\";\n\nuint160 constant SYSTEM_CONTRACTS_OFFSET = 0x8000; // 2^15\n\naddress constant ECRECOVER_SYSTEM_CONTRACT = address(0x01);\naddress constant SHA256_SYSTEM_CONTRACT = address(0x02);\n\naddress payable constant BOOTLOADER_FORMAL_ADDRESS = payable(address(SYSTEM_CONTRACTS_OFFSET + 0x01));\nIAccountCodeStorage constant ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT = IAccountCodeStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x02));\nINonceHolder constant NONCE_HOLDER_SYSTEM_CONTRACT = INonceHolder(address(SYSTEM_CONTRACTS_OFFSET + 0x03));\nIKnownCodesStorage constant KNOWN_CODE_STORAGE_CONTRACT = IKnownCodesStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x04));\nIImmutableSimulator constant IMMUTABLE_SIMULATOR_SYSTEM_CONTRACT = IImmutableSimulator(address(SYSTEM_CONTRACTS_OFFSET + 0x05));\nIContractDeployer constant DEPLOYER_SYSTEM_CONTRACT = IContractDeployer(address(SYSTEM_CONTRACTS_OFFSET + 0x06));\n\n// A contract that is allowed to deploy any codehash\n// on any address. To be used only during an upgrade.\naddress constant FORCE_DEPLOYER = address(SYSTEM_CONTRACTS_OFFSET + 0x07);\nIL1Messenger constant L1_MESSENGER_CONTRACT = IL1Messenger(address(SYSTEM_CONTRACTS_OFFSET + 0x08));\naddress constant MSG_VALUE_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x09);\n\nIEthToken constant ETH_TOKEN_SYSTEM_CONTRACT = IEthToken(address(SYSTEM_CONTRACTS_OFFSET + 0x0a));\n\naddress constant KECCAK256_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x10);\n\nSystemContext constant SYSTEM_CONTEXT_CONTRACT = SystemContext(address(SYSTEM_CONTRACTS_OFFSET + 0x0b));\n\nuint256 constant MAX_SYSTEM_CONTRACT_ADDRESS = 0xffff;\n\nbytes32 constant DEFAULT_ACCOUNT_CODE_HASH = 0x00;\n\n// The number of bytes that are published during the contract deployment\n// in addition to the bytecode itself.\nuint256 constant BYTECODE_PUBLISHING_OVERHEAD = 100;\n"},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport './RLPEncoder.sol';\nimport './Constants.sol';\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IPaymasterFlow.sol\";\n\n// TODO: change it to the `0x80`, must be changed atomically with the server.\n/// @dev Denotes the first byte of the special zkSync's EIP-712-signed transaction.\nuint8 constant EIP_712_TX_TYPE = 0x71;\n\n/// @dev Denotes the first byte of some legacy transaction, which type is unknown to the server.\nuint8 constant LEGACY_TX_TYPE = 0x0;\nuint8 constant EIP_1559_TX_TYPE = 0x02;\n\nstruct Transaction {\n\tuint256 txType;\n\tuint256 from;\n\tuint256 to;\n\tuint256 ergsLimit;\n\tuint256 ergsPerPubdataByteLimit;\n\tuint256 maxFeePerErg;\n\tuint256 maxPriorityFeePerErg;\n\tuint256 paymaster;\n\t// In the future, we might want to add some\n\t// new fields to the struct. The `txData` struct\n\t// is to be passed to account and any changes to its structure\n\t// would mean a breaking change to these accounts. In order to prevent this,\n\t// we should keep some fields as \"reserved\".\n\t// It is also recommneded that their length is fixed, since\n\t// it would allow easier proof integration (in case we will need\n\t// some special circuit for preprocessing transactions).\n\tuint256[6] reserved;\n\tbytes data;\n\tbytes signature;\n\tbytes32[] factoryDeps;\n\tbytes paymasterInput;\n\t// Reserved dynamic type for the future use-case. Using it should be avoided,\n\t// But it is still here, just in case we want to enable some additional functionality.\n\tbytes reservedDynamic;\n}\n\nlibrary TransactionHelper {\n\t/// @notice The EIP-712 typehash for the contract's domain\n\tbytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId)');\n\n\tbytes32 constant EIP712_TRANSACTION_TYPE_HASH =\n\t\tkeccak256(\n\t\t\t'Transaction(uint256 txType,uint256 from,uint256 to,uint256 ergsLimit,uint256 ergsPerPubdataByteLimit,uint256 maxFeePerErg,uint256 maxPriorityFeePerErg,uint256 paymaster,uint256 nonce,uint256 value,bytes data,bytes32[] factoryDeps,bytes paymasterInput)'\n\t\t);\n\n\tfunction isEthToken(uint256 _addr) internal pure returns (bool){\n\t\treturn _addr == uint256(uint160(address(ETH_TOKEN_SYSTEM_CONTRACT))) || _addr == 0;\n\t}\n\n\tfunction encodeHash(Transaction calldata _transaction) internal view returns (bytes32 resultHash) {\n\t\tif (_transaction.txType == LEGACY_TX_TYPE) {\n\t\t\tresultHash = _encodeHashLegacyTx(_transaction);\n\t\t} else if (_transaction.txType == EIP_712_TX_TYPE) {\n\t\t\tresultHash = _encodeHashEIP712Tx(_transaction);\n        } else if (_transaction.txType == EIP_1559_TX_TYPE) {\n            resultHash = _encodeHashEIP1559Tx(_transaction);\n        } else {\n\t\t\t// Currently no other transaction types are supported.\n\t\t\t// Any new transaction types will be processed in a similar manner.\n\t\t\trevert();\n\t\t}\n\t}\n\n\t/// @notice encode hash of the zkSync native transaction type.\n\t/// @return keccak256 of the EIP-712 encoded representation of transaction\n\tfunction _encodeHashEIP712Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                EIP712_TRANSACTION_TYPE_HASH,\n                _transaction.txType,\n                _transaction.from,\n                _transaction.to,\n                _transaction.ergsLimit,\n                _transaction.ergsPerPubdataByteLimit,\n                _transaction.maxFeePerErg,\n                _transaction.maxPriorityFeePerErg,\n                _transaction.paymaster,\n                _transaction.reserved[0],\n                _transaction.reserved[1],\n                keccak256(_transaction.data),\n                keccak256(abi.encodePacked(_transaction.factoryDeps)),\n                keccak256(_transaction.paymasterInput)\n\t\t\t)\n\t\t);\n\n\t\tbytes32 domainSeparator = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256('zkSync'), keccak256('2'), _getChainId()));\n\n\t\treturn keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n\t}\n\n\t/// @notice encode hash of the legacy transaction type.\n\t/// @return keccak256 of the serialized RLP encoded representation of transaction\n\tfunction _encodeHashLegacyTx(Transaction calldata _transaction) private view returns (bytes32) {\n\t\t// Hash of legacy transactions are encoded as one of the:\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0)\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data)\n\t\t//\n\t\t// In this RLP encoding, only one higher list appears, so we encode each element\n\t\t// inside list and then concatenate the length of all elements with them.\n\n\t\tbytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n\t\t// Encode `gasPrice` and `gasLimit` together to prevent \"stack too deep error\".\n\t\tbytes memory encodedGasParam;\n\t\t{\n\t\t\tbytes memory encodedGasPrice = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n\t\t\tbytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n\t\t\tencodedGasParam = bytes.concat(encodedGasPrice, encodedGasLimit);\n\t\t}\n\n\t\tbytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n\t\tbytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n\t\t// Encode only the length of the transaction data, and not the data itself,\n\t\t// so as not to copy to memory a potentially huge transaction data twice.\n\t\tbytes memory encodedDataLength;\n\t\t{\n\t\t\tuint256 txDataLen = _transaction.data.length;\n\t\t\tif (txDataLen != 1) {\n\t\t\t\t// If the length is not equal to one, then only using the length can it be encoded definitely.\n\t\t\t\tencodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n\t\t\t} else if (_transaction.data[0] >= 0x80) {\n\t\t\t\t// If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n\t\t\t\tencodedDataLength = hex'81';\n\t\t\t}\n\t\t\t// Otherwise the length is not encoded at all.\n\t\t}\n\n\t\t// Encode `chainId` according to EIP-155, but only if the `chainId` is specified in the transaction.\n\t\tbytes memory encodedChainId;\n\t\tif (_transaction.reserved[2] != 0) {\n\t\t\tencodedChainId = bytes.concat(RLPEncoder.encodeUint256(_getChainId()), hex'80_80');\n\t\t}\n\n\t\tbytes memory encodedListLength;\n\t\tunchecked {\n\t\t\tuint256 listLength = encodedNonce.length +\n\t\t\t\tencodedGasParam.length +\n\t\t\t\tencodedTo.length +\n\t\t\t\tencodedValue.length +\n\t\t\t\tencodedDataLength.length +\n\t\t\t\t_transaction.data.length +\n\t\t\t\tencodedChainId.length;\n\n\t\t\tencodedListLength = RLPEncoder.encodeListLen(listLength);\n\t\t}\n\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tbytes.concat(\n\t\t\t\t\tencodedListLength,\n\t\t\t\t\tencodedNonce,\n\t\t\t\t\tencodedGasParam,\n\t\t\t\t\tencodedTo,\n\t\t\t\t\tencodedValue,\n\t\t\t\t\tencodedDataLength,\n\t\t\t\t\t_transaction.data,\n\t\t\t\t\tencodedChainId\n\t\t\t\t)\n\t\t\t);\n\t}\n\n    function _encodeHashEIP1559Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        // Hash of EIP1559 transactions is encoded the following way:\n        // H(0x02 || RLP(chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list))\n        // \n        // Note, that on zkSync access lists are not supported and should always be empty.\n\n        // Encode all fixed-length params to avoid \"stack too deep error\"\n        bytes memory encodedFixedLengthParams;\n        {\n            bytes memory encodedChainId = RLPEncoder.encodeUint256(_getChainId());\n            bytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n            bytes memory encodedMaxPriorityFeePerGas = RLPEncoder.encodeUint256(_transaction.maxPriorityFeePerErg);\n            bytes memory encodedMaxFeePerGas = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n            bytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n            bytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n            bytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n            encodedFixedLengthParams = bytes.concat(\n                encodedChainId, \n                encodedNonce, \n                encodedMaxPriorityFeePerGas, \n                encodedMaxFeePerGas, \n                encodedGasLimit, \n                encodedTo, \n                encodedValue\n            );\n        }\n\n        // Encode only the length of the transaction data, and not the data itself,\n        // so as not to copy to memory a potentially huge transaction data twice.\n        bytes memory encodedDataLength;\n        {\n            uint256 txDataLen = _transaction.data.length;\n            if (txDataLen != 1) {\n                // If the length is not equal to one, then only using the length can it be encoded definitely.\n                encodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n            } else if (_transaction.data[0] >= 0x80) {\n                // If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n                encodedDataLength = hex'81';\n            }\n            // Otherwise the length is not encoded at all.\n        }\n\n        // On zkSync, access lists are always zero length (at least for now).\n        bytes memory encodedAccessListLength = RLPEncoder.encodeListLen(0);\n\n        bytes memory encodedListLength;\n        unchecked {\n            uint256 listLength = \n                encodedFixedLengthParams.length +\n                encodedDataLength.length +\n                _transaction.data.length +\n                encodedAccessListLength.length;\n\n            encodedListLength = RLPEncoder.encodeListLen(listLength);\n        }\n\n        return\n            keccak256(\n                bytes.concat(\n                    '\\x02',\n                    encodedListLength,\n                    encodedFixedLengthParams,\n                    encodedDataLength,\n                    _transaction.data,\n                    encodedAccessListLength\n                )\n            );\n    }\n\n\tfunction _getChainId() internal view returns(uint256 chainId) { \n\t\tchainId = SYSTEM_CONTEXT_CONTRACT.chainId();\n\t}\n\n\tfunction processPaymasterInput(Transaction calldata _transaction) internal {\n\t\trequire(_transaction.paymasterInput.length >= 4, \"The standard paymaster input must be at least 4 bytes long\");\n\n\t\tbytes4 paymasterInputSelector = bytes4(_transaction.paymasterInput[0:4]);\n\t\tif (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n\t\t\t// While the actual data consists of address, uint256 and bytes data, \n\t\t\t// the data is needed only for the paymaster, so we ignore it here for the sake of optimization\n\t\t\t(address token, uint256 minAllowance) = abi.decode(_transaction.paymasterInput[4:68], (address, uint256));\n\t\t\taddress paymaster = address(uint160(_transaction.paymaster));\n\n\t\t\tuint256 currentAllowance = IERC20(token).allowance(address(this), paymaster);\n\t\t\tif (currentAllowance < minAllowance) {\n\t\t\t\t// Some tokens, e.g. USDT require that the allowance is firsty set to zero \n\t\t\t\t// and only then updated to the new value.\n\t\t\t\t\n\t\t\t\tIERC20(token).approve(paymaster, 0);\n\t\t\t\tIERC20(token).approve(paymaster, minAllowance);\n\t\t\t}\n\t\t} else if (paymasterInputSelector == IPaymasterFlow.general.selector) {\n\t\t\t// Do nothing. General(bytes) paymaster flow means that the paymaster must interpret these bytes on his own.\n\t\t} else {\n\t\t\trevert(\"Unsupported paymaster flow\");\n\t\t}\n\t}\n\n\tfunction payToTheBootloader(Transaction calldata _transaction) internal returns (bool success){\n\t\taddress bootloaderAddr = BOOTLOADER_FORMAL_ADDRESS;\n\t\tuint256 amount = _transaction.maxFeePerErg * _transaction.ergsLimit;\n\n\t\tassembly {\n\t\t\tsuccess := call(\n\t\t\t\tgas(),\n\t\t\t\tbootloaderAddr,\n\t\t\t\tamount,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t)\n\t\t}\n\t}\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport '../TransactionHelper.sol';\n\nenum ExecutionResult {\n\tRevert,\n\tSuccess\n}\n\ninterface IPaymaster {\n\tfunction validateAndPayForPaymasterTransaction(Transaction calldata _transaction) external payable returns (bytes memory context);\n\n\t/// @dev Called by the bootloader after the execution of the transaction. Please note that \n\t/// there is no guarantee that this method will be called at all. Unlike the original EIP4337, \n\t/// this method won't be called if the transaction execution results in out-of-gas.\n\t/// @param _context, the context of the execution, returned by the \"validateAndPayForPaymasterTransaction\" method.\n\t/// @param  _transaction, the users' transaction.\n\t/// @param _txResult, the result of the transaction execution (success or failure).\n\t/// @param _maxRefundedErgs, the upper bound on the amout of ergs that could be refunded to the paymaster. \n\t/// @dev The exact amount refunded depends on the ergs spent by the \"postOp\" itself and so the developers should \n\t/// take that into account.\n\tfunction postOp(\n\t\tbytes calldata _context,\n\t\tTransaction calldata _transaction,\n\t\tExecutionResult _txResult,\n\t\tuint256 _maxRefundedErgs\n\t) external payable;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @dev The interface that is used for encoding/decoding of \n * different types of paymaster flows.\n * @notice This is NOT an interface to be implementated\n * by contracts. It is just used for encoding.\n */\ninterface IPaymasterFlow {\n    function general(bytes calldata input) external;\n    function approvalBased(address _token, uint256 _minAllowance, bytes calldata _innerInput) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IAccountCodeStorage {\n    function storeCodeHash(address _address, bytes32 _hash) external;\n\n    function getRawCodeHash(address _address) external view returns (bytes32 codeHash);\n\n    function getCodeHash(uint256 _input) external returns (bytes32 codeHash);\n    \n    function getCodeSize(uint256 _input) external returns (uint256 codeSize);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nuint256 constant MAX_KNOWN_CODE_HASHES = 16;\ninterface IKnownCodesStorage {\n    function markAsKnownCandidates(bytes32[MAX_KNOWN_CODE_HASHES] calldata _hash) external;\n\n    function markAsRepublished(bytes32 _hash) external;\n\n    function removeUnusedKnownCandidate(bytes32 _hash) external;\n\n    function checkIfKnown(bytes32 _hash) external view returns (bool);\n\n    function getMarker(bytes32 _hash) external view returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IContractDeployer {\n    event ContractDeployed(address indexed deployerAddress, bytes32 indexed bytecodeHash, address indexed contractAddress);\n\n    function getNewAddressCreate2(\n        address _sender,\n        bytes32 _bytecodeHash,\n        bytes32 _salt,\n        bytes calldata _input\n    ) external pure returns (address newAddress);\n\n    function getNewAddressCreate(\n        address _sender,\n        uint256 _senderNonce\n    ) external pure returns (address newAddress);\n\n    function create2 (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n\n    function create2Account (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While the `_salt` parameter is not used anywhere here, \n    /// it is still needed for consistency between `create` and\n    /// `create2` functions (required by the compiler).\n    function create (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While `_salt` is never used here, we leave it here as a parameter\n    /// for the consistency with the `create` function.\n    function createAccount (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IL1Messenger {\n    // Possibly in the future we will be able to track the messages sent to L1 with \n    // some hooks in the VM. For now, it is much easier to track them with L2 events.\n    event L1MessageSent(address indexed _sender, bytes32 indexed _hash, bytes _message);\n\n    function sendToL1(bytes memory _message) external returns (bytes32);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IEthToken {\n    function balanceOf(address) external returns (uint256);\n    \n    function transferFromTo(address _from, address _to, uint256 _amount) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/SystemContext.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./Constants.sol\";\n\n/**\n * @author Matter Labs\n * @notice Contract that stores some of the context variables, that may be either \n * block-scoped, tx-scoped or system-wide.\n */\ncontract SystemContext {\n    modifier onlyBootloader {\n        require(msg.sender == BOOTLOADER_FORMAL_ADDRESS);\n        _;\n    }\n    \n    uint256 public chainId = 270;\n    address public origin;\n    uint256 public ergsPrice;\n    // Some dummy value, maybe will be possible to change it in the future.\n    uint256 public blockErgsLimit = (1 << 30);\n    // For the support of coinbase, we will the bootloader formal address for now\n    address public coinbase = BOOTLOADER_FORMAL_ADDRESS;\n    // For consistency with other L2s\n    uint256 public difficulty = 2500000000000000;\n    uint256 public msize = (1 << 24);\n    uint256 public baseFee;\n    \n    uint256 constant BLOCK_INFO_BLOCK_NUMBER_PART = (1<<128);\n    // 2^128 * block_number + block_timestamp\n    uint256 public currentBlockInfo;\n\n    mapping(uint256 => bytes32) public blockHash;\n    \n    function getBlockHashEVM(uint256 _block) external view returns (bytes32 hash) {\n        if(block.number < _block || block.number - _block > 256) {\n            hash = bytes32(0);\n        } else {\n            hash = blockHash[_block];\n        }\n    }\n\n    function getBlockNumberAndTimestamp() public view returns (uint256 blockNumber, uint256 blockTimestamp) {\n        uint256 blockInfo = currentBlockInfo;\n        blockNumber = blockInfo / BLOCK_INFO_BLOCK_NUMBER_PART;\n        blockTimestamp = blockInfo % BLOCK_INFO_BLOCK_NUMBER_PART;\n    }\n\n    // Note, that for now, the implementation of the bootloader allows this variables to \n    // be incremented multiple times inside a block, so it should not relied upon right now.\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        (blockNumber, ) = getBlockNumberAndTimestamp();\n    }\n\n    function getBlockTimestamp() public view returns (uint256 timestamp) {\n        (, timestamp) = getBlockNumberAndTimestamp();\n    }\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface INonceHolder {\n    function getRawNonce(address _address) external view returns(uint256);\n\n    function getAccountNonce() external view returns (uint256);\n\n    function incrementNonce() external returns (uint256);\n\n    function incrementNonceIfEquals(uint256 _expectedNonce) external;\n\n    function getDeploymentNonce(address _address) external view returns (uint256);\n\n    function incrementDeploymentNonce(address _address) external returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nstruct ImmutableData {\n    uint256 index;\n    bytes32 value;\n}\n\ninterface IImmutableSimulator {\n    function getImmutable(address _dest, uint256 _index) external view returns (bytes32);\n\n    function setImmutables(address _dest, ImmutableData[] calldata immutables) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nlibrary RLPEncoder {\n\tfunction encodeAddress(address _val) internal pure returns (bytes memory encoded) {\n\t\t// The size is equal to 14 bytes of the address itself + 1 for encoding bytes length in RLP.\n\t\tencoded = new bytes(0x15);\n\n\t\tbytes20 shiftedVal = bytes20(_val);\n\t\tassembly {\n\t\t\t// In the first byte we write the encoded length as 0x80 + 0x14 == 0x94.\n\t\t\tmstore(add(encoded, 0x20), 0x9400000000000000000000000000000000000000000000000000000000000000)\n\t\t\t// Write address data without stripping zeros.\n\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t}\n\t}\n\n\tfunction encodeUint256(uint256 _val) internal pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_val < 128) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\t// Handle zero as a non-value, since stripping zeroes results in an empty byte array\n\t\t\t\tencoded[0] = (_val == 0) ? bytes1(uint8(128)) : bytes1(uint8(_val));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_val);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(hbs + 0x81));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _val << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Encodes the size of bytes in RLP format.\n\t/// NOTE: panics if the length is 1, since the length encoding is ambiguous in this case.\n\tfunction encodeNonSingleBytesLen(uint256 _len) internal pure returns (bytes memory) {\n\t\tassert(_len != 1);\n\t\treturn _encodeLength(_len, 0x80);\n\t}\n\n\t/// @notice Encodes the size of list items in RLP format.\n\tfunction encodeListLen(uint256 _len) internal pure returns (bytes memory) {\n\t\treturn _encodeLength(_len, 0xc0);\n\t}\n\n\tfunction _encodeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_len < 56) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\tencoded[0] = bytes1(uint8(_len + _offset));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_len);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(_offset + hbs + 56));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _len << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Computes the index of the highest byte set in number.\n\t/// @notice Uses little endian ordering (The least significant byte has index `0`).\n\t/// NOTE: returns `0` for `0`\n\tfunction _highestByteSet(uint256 _number) private pure returns (uint256 hbs) {\n\t\t// TODO: for optimization, the comparison can be replaced with bitwise operations\n\t\t// should be resolver after evaluating the cost of opcodes.\n\t\tif (_number >= 2**128) {\n\t\t\t_number >>= 128;\n\t\t\thbs += 16;\n\t\t}\n\t\tif (_number >= 2**64) {\n\t\t\t_number >>= 64;\n\t\t\thbs += 8;\n\t\t}\n\t\tif (_number >= 2**32) {\n\t\t\t_number >>= 32;\n\t\t\thbs += 4;\n\t\t}\n\t\tif (_number >= 2**16) {\n\t\t\t_number >>= 16;\n\t\t\thbs += 2;\n\t\t}\n\t\tif (_number >= 2**8) {\n\t\t\thbs += 1;\n\t\t}\n\t}\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"}},"settings":{"optimizer":{"enabled":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/MyCustomPaymaster.sol:23:34:\n   |\n23 |     function getTokenRateFromEth(address erc20TokenAddr, uint256 ethAmount)\n   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":985,"end":1007},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/MyCustomPaymaster.sol:34:32:\n   |\n34 |     function getTokenRateToEth(address erc20TokenAddr, uint256 tokenAmount)\n   |                                ^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":1314,"end":1336},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> contracts/MyCustomPaymaster.sol:41:27:\n   |\n41 |     function paymasterFee(uint256 requiredEth) public returns (uint256 fee) {\n   |                           ^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":1485,"end":1504},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> contracts/MyCustomPaymaster.sol:64:29:\n   |\n64 |             (address token, uint256 amount, ) = abi.decode(\n   |                             ^^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":2458,"end":2472},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/MyCustomPaymaster.sol:116:9:\n    |\n116 |         ExecutionResult _txResult,\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":4472,"end":4497},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/MyCustomPaymaster.sol:23:5:\n   |\n23 |     function getTokenRateFromEth(address erc20TokenAddr, uint256 ethAmount)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":956,"end":1281},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/MyCustomPaymaster.sol:34:5:\n   |\n34 |     function getTokenRateToEth(address erc20TokenAddr, uint256 tokenAmount)\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":1287,"end":1457},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n  --> contracts/MyCustomPaymaster.sol:41:5:\n   |\n41 |     function paymasterFee(uint256 requiredEth) public returns (uint256 fee) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"file":"contracts/MyCustomPaymaster.sol","start":1463,"end":1560},"type":"Warning"}],"sources":{},"contracts":{"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"RLPEncoder":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"00000024011001970000002504000041000000000014037600000026010000410000000000210376000000000130004c000000080000613d008b00090000034f008b00200000034f0000008001000039000000400200003900000000001203760000000001000357000000000110004c0000001e0000c13d00000026010000410000000001010375000000000110004c000000170000c13d000000800100003900000000020000190000000003000019008b007c0000034f0000002001000039000000270200004100000000001203760000002801000041000000000001037600000029010000410000008c0001037000000000010000190000008d0001037200020000000000020000000001000350000080020210008c0000003d0000613d0000000002000351000080010220008c0000003d0000613d0000002a020000410000002b0300004100000000002303760000002c02000041000000000012037600008002010000390000002d020000410000000003000356000000020330008a00000020033000c9008b003f0000034f000000ff01000039000000010110024f000000000110004c0000003b0000613d0000002e01000041000000020110017f0000000001010378000000000110004c0000003d0000c13d00000000010000190000008c0001037000000000010000190000008d000103720002000000000002000200000003001d0000002003300039000100000003001d00000058002103650000000205000029000000200250011a000000000201001f0000000106000029000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a00000030021001cd00000000010500190000000200000005000000000001036f0000000103000029000000020500002900000000020000190000000102004039000000010220018f000000000220004c000000720000c13d000000200250011a000000000201001f0000000006030019000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a0000002f0210019d00000000010500190000000200000005000000000001036f0000000000010371000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000840000613d00000000002103760000002001100039000000010440008a000000000540004c0000007f0000c13d0000001f0330018f000000000430004c0000008a0000613d0000000303300210008b00730000034f000000000001036f000000000001036f0000008b000003740000008c000103700000008d00010372000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc00000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e000200000000000000000000000000000000000000000000000400000000000e000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000000000000000000000000000000000000000fff8000000000000000000000000000000000000000000000000000000000000fff8040000000000000000000000000000000000000000000000240000000000fff800000000000000000000000000000000000000000000000000ffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0031c15a88ae13121bf6eb00e038667e1abbcba4207c0bb59a26ceec467d8646"}},"@matterlabs/zksync-contracts/l2/system-contracts/SystemContext.sol":{"SystemContext":{"abi":[{"inputs":[],"name":"baseFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockErgsLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"blockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"coinbase","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentBlockInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"difficulty","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ergsPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_block","type":"uint256"}],"name":"getBlockHashEVM","outputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumberAndTimestamp","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockTimestamp","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"msize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"0105b5fe1c3e5a4f7e07cdc33029b3b98b97dcddc4b15a1751eb5a1bda62ca45"}},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"TransactionHelper":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"00000024011001970000002504000041000000000014037600000026010000410000000000210376000000000130004c000000080000613d008b00090000034f008b00200000034f0000008001000039000000400200003900000000001203760000000001000357000000000110004c0000001e0000c13d00000026010000410000000001010375000000000110004c000000170000c13d000000800100003900000000020000190000000003000019008b007c0000034f0000002001000039000000270200004100000000001203760000002801000041000000000001037600000029010000410000008c0001037000000000010000190000008d0001037200020000000000020000000001000350000080020210008c0000003d0000613d0000000002000351000080010220008c0000003d0000613d0000002a020000410000002b0300004100000000002303760000002c02000041000000000012037600008002010000390000002d020000410000000003000356000000020330008a00000020033000c9008b003f0000034f000000ff01000039000000010110024f000000000110004c0000003b0000613d0000002e01000041000000020110017f0000000001010378000000000110004c0000003d0000c13d00000000010000190000008c0001037000000000010000190000008d000103720002000000000002000200000003001d0000002003300039000100000003001d00000058002103650000000205000029000000200250011a000000000201001f0000000106000029000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a00000030021001cd00000000010500190000000200000005000000000001036f0000000103000029000000020500002900000000020000190000000102004039000000010220018f000000000220004c000000720000c13d000000200250011a000000000201001f0000000006030019000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a0000002f0210019d00000000010500190000000200000005000000000001036f0000000000010371000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000840000613d00000000002103760000002001100039000000010440008a000000000540004c0000007f0000c13d0000001f0330018f000000000430004c0000008a0000613d0000000303300210008b00730000034f000000000001036f000000000001036f0000008b000003740000008c000103700000008d00010372000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc00000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e000200000000000000000000000000000000000000000000000400000000000e000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000000000000000000000000000000000000000fff8000000000000000000000000000000000000000000000000000000000000fff8040000000000000000000000000000000000000000000000240000000000fff800000000000000000000000000000000000000000000000000ffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0031c15a88ae13121bf6eb00e038667e1abbcba4207c0bb59a26ceec467d8646"}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"IAccountCodeStorage":{"abi":[{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeSize","outputs":[{"internalType":"uint256","name":"codeSize","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"storeCodeHash","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"IContractDeployer":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"deployerAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2Account","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"createAccount","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_senderNonce","type":"uint256"}],"name":"getNewAddressCreate","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"getNewAddressCreate2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"IEthToken":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFromTo","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"IImmutableSimulator":{"abi":[{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getImmutable","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"internalType":"struct ImmutableData[]","name":"immutables","type":"tuple[]"}],"name":"setImmutables","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"IKnownCodesStorage":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"checkIfKnown","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"getMarker","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[16]","name":"_hash","type":"bytes32[16]"}],"name":"markAsKnownCandidates","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"markAsRepublished","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"removeUnusedKnownCandidate","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"IL1Messenger":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"_hash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"_message","type":"bytes"}],"name":"L1MessageSent","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendToL1","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"INonceHolder":{"abi":[{"inputs":[],"name":"getAccountNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"incrementDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"incrementNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_expectedNonce","type":"uint256"}],"name":"incrementNonceIfEquals","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"IPaymaster":{"abi":[{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"IPaymasterFlow":{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_minAllowance","type":"uint256"},{"internalType":"bytes","name":"_innerInput","type":"bytes"}],"name":"approvalBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"general","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"contracts/MyCustomPaymaster.sol":{"CustomPaymaster":{"abi":[{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"NotImplemented","type":"error"},{"inputs":[],"name":"BOOTLOADER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ENTRY_POINT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"admins","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"blackListUsers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"erc20TokenAddr","type":"address"},{"internalType":"uint256","name":"ethAmount","type":"uint256"}],"name":"getTokenRateFromEth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"erc20TokenAddr","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}],"name":"getTokenRateToEth","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requiredEth","type":"uint256"}],"name":"paymasterFee","outputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_admin","type":"address"}],"name":"setAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"tokenAddr","type":"address"},{"internalType":"bool","name":"isWhiteList","type":"bool"}],"name":"setWhitelistToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whiteListedErc20s","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawEth","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"034d9997e56639292e5b94c6255319dbf4f919998fee58c883d6cf11c1d17627"}}}}}