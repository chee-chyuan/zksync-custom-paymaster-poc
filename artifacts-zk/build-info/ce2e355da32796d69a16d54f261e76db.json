{"id":"ce2e355da32796d69a16d54f261e76db","_format":"hh-sol-build-info-1","solcVersion":"0.8.16","solcLongVersion":"","input":{"language":"Solidity","sources":{"contracts/MyERC20.sol":{"content":"// SPDX-License-Identifier: UNLICENSED\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MyERC20 is ERC20 {\n    uint8 private _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    function mint(address _to, uint256 _amount) public returns (bool) {\n        _mint(_to, _amount);\n        return true;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"contracts/MyPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { IPaymaster, ExecutionResult } from '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol';\nimport { IPaymasterFlow } from '@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol';\nimport { TransactionHelper, Transaction } from '@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol';\n\nimport '@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol';\n\nimport \"@openzeppelin/contracts/interfaces/IERC20.sol\";\n\ncontract MyPaymaster is IPaymaster {\n    uint256 constant PRICE_FOR_PAYING_FEES = 1;\n\n    address public allowedToken;\n\n    modifier onlyBootloader() {\n        require(msg.sender == BOOTLOADER_FORMAL_ADDRESS, \"Only bootloader can call this method\");\n        // Continure execution if called from the bootloader.\n        _;\n    }\n\n    constructor(address _erc20) {\n        allowedToken = _erc20;\n    }\n\n    function validateAndPayForPaymasterTransaction(Transaction calldata _transaction) external payable override onlyBootloader returns (bytes memory context) {\n        // Transaction validation logic goes here\n    }\n\n    function postOp(\n      bytes calldata _context,\n      Transaction calldata _transaction,\n      ExecutionResult _txResult,\n      uint256 _maxRefundedErgs\n    ) external payable onlyBootloader {\n        // This contract does not support any refunding logic\n    }\n\n    receive() external payable {}\n}"},"@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAccountCodeStorage.sol\";\nimport \"./interfaces/INonceHolder.sol\";\nimport \"./interfaces/IContractDeployer.sol\";\nimport \"./interfaces/IKnownCodesStorage.sol\";\nimport \"./interfaces/IImmutableSimulator.sol\";\nimport \"./interfaces/IEthToken.sol\";\nimport \"./interfaces/IL1Messenger.sol\";\nimport \"./SystemContext.sol\";\n\nuint160 constant SYSTEM_CONTRACTS_OFFSET = 0x8000; // 2^15\n\naddress constant ECRECOVER_SYSTEM_CONTRACT = address(0x01);\naddress constant SHA256_SYSTEM_CONTRACT = address(0x02);\n\naddress payable constant BOOTLOADER_FORMAL_ADDRESS = payable(address(SYSTEM_CONTRACTS_OFFSET + 0x01));\nIAccountCodeStorage constant ACCOUNT_CODE_STORAGE_SYSTEM_CONTRACT = IAccountCodeStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x02));\nINonceHolder constant NONCE_HOLDER_SYSTEM_CONTRACT = INonceHolder(address(SYSTEM_CONTRACTS_OFFSET + 0x03));\nIKnownCodesStorage constant KNOWN_CODE_STORAGE_CONTRACT = IKnownCodesStorage(address(SYSTEM_CONTRACTS_OFFSET + 0x04));\nIImmutableSimulator constant IMMUTABLE_SIMULATOR_SYSTEM_CONTRACT = IImmutableSimulator(address(SYSTEM_CONTRACTS_OFFSET + 0x05));\nIContractDeployer constant DEPLOYER_SYSTEM_CONTRACT = IContractDeployer(address(SYSTEM_CONTRACTS_OFFSET + 0x06));\n\n// A contract that is allowed to deploy any codehash\n// on any address. To be used only during an upgrade.\naddress constant FORCE_DEPLOYER = address(SYSTEM_CONTRACTS_OFFSET + 0x07);\nIL1Messenger constant L1_MESSENGER_CONTRACT = IL1Messenger(address(SYSTEM_CONTRACTS_OFFSET + 0x08));\naddress constant MSG_VALUE_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x09);\n\nIEthToken constant ETH_TOKEN_SYSTEM_CONTRACT = IEthToken(address(SYSTEM_CONTRACTS_OFFSET + 0x0a));\n\naddress constant KECCAK256_SYSTEM_CONTRACT = address(SYSTEM_CONTRACTS_OFFSET + 0x10);\n\nSystemContext constant SYSTEM_CONTEXT_CONTRACT = SystemContext(address(SYSTEM_CONTRACTS_OFFSET + 0x0b));\n\nuint256 constant MAX_SYSTEM_CONTRACT_ADDRESS = 0xffff;\n\nbytes32 constant DEFAULT_ACCOUNT_CODE_HASH = 0x00;\n\n// The number of bytes that are published during the contract deployment\n// in addition to the bytecode itself.\nuint256 constant BYTECODE_PUBLISHING_OVERHEAD = 100;\n"},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport './RLPEncoder.sol';\nimport './Constants.sol';\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IPaymasterFlow.sol\";\n\n// TODO: change it to the `0x80`, must be changed atomically with the server.\n/// @dev Denotes the first byte of the special zkSync's EIP-712-signed transaction.\nuint8 constant EIP_712_TX_TYPE = 0x71;\n\n/// @dev Denotes the first byte of some legacy transaction, which type is unknown to the server.\nuint8 constant LEGACY_TX_TYPE = 0x0;\nuint8 constant EIP_1559_TX_TYPE = 0x02;\n\nstruct Transaction {\n\tuint256 txType;\n\tuint256 from;\n\tuint256 to;\n\tuint256 ergsLimit;\n\tuint256 ergsPerPubdataByteLimit;\n\tuint256 maxFeePerErg;\n\tuint256 maxPriorityFeePerErg;\n\tuint256 paymaster;\n\t// In the future, we might want to add some\n\t// new fields to the struct. The `txData` struct\n\t// is to be passed to account and any changes to its structure\n\t// would mean a breaking change to these accounts. In order to prevent this,\n\t// we should keep some fields as \"reserved\".\n\t// It is also recommneded that their length is fixed, since\n\t// it would allow easier proof integration (in case we will need\n\t// some special circuit for preprocessing transactions).\n\tuint256[6] reserved;\n\tbytes data;\n\tbytes signature;\n\tbytes32[] factoryDeps;\n\tbytes paymasterInput;\n\t// Reserved dynamic type for the future use-case. Using it should be avoided,\n\t// But it is still here, just in case we want to enable some additional functionality.\n\tbytes reservedDynamic;\n}\n\nlibrary TransactionHelper {\n\t/// @notice The EIP-712 typehash for the contract's domain\n\tbytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256('EIP712Domain(string name,string version,uint256 chainId)');\n\n\tbytes32 constant EIP712_TRANSACTION_TYPE_HASH =\n\t\tkeccak256(\n\t\t\t'Transaction(uint256 txType,uint256 from,uint256 to,uint256 ergsLimit,uint256 ergsPerPubdataByteLimit,uint256 maxFeePerErg,uint256 maxPriorityFeePerErg,uint256 paymaster,uint256 nonce,uint256 value,bytes data,bytes32[] factoryDeps,bytes paymasterInput)'\n\t\t);\n\n\tfunction isEthToken(uint256 _addr) internal pure returns (bool){\n\t\treturn _addr == uint256(uint160(address(ETH_TOKEN_SYSTEM_CONTRACT))) || _addr == 0;\n\t}\n\n\tfunction encodeHash(Transaction calldata _transaction) internal view returns (bytes32 resultHash) {\n\t\tif (_transaction.txType == LEGACY_TX_TYPE) {\n\t\t\tresultHash = _encodeHashLegacyTx(_transaction);\n\t\t} else if (_transaction.txType == EIP_712_TX_TYPE) {\n\t\t\tresultHash = _encodeHashEIP712Tx(_transaction);\n        } else if (_transaction.txType == EIP_1559_TX_TYPE) {\n            resultHash = _encodeHashEIP1559Tx(_transaction);\n        } else {\n\t\t\t// Currently no other transaction types are supported.\n\t\t\t// Any new transaction types will be processed in a similar manner.\n\t\t\trevert();\n\t\t}\n\t}\n\n\t/// @notice encode hash of the zkSync native transaction type.\n\t/// @return keccak256 of the EIP-712 encoded representation of transaction\n\tfunction _encodeHashEIP712Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        bytes32 structHash = keccak256(\n            abi.encode(\n                EIP712_TRANSACTION_TYPE_HASH,\n                _transaction.txType,\n                _transaction.from,\n                _transaction.to,\n                _transaction.ergsLimit,\n                _transaction.ergsPerPubdataByteLimit,\n                _transaction.maxFeePerErg,\n                _transaction.maxPriorityFeePerErg,\n                _transaction.paymaster,\n                _transaction.reserved[0],\n                _transaction.reserved[1],\n                keccak256(_transaction.data),\n                keccak256(abi.encodePacked(_transaction.factoryDeps)),\n                keccak256(_transaction.paymasterInput)\n\t\t\t)\n\t\t);\n\n\t\tbytes32 domainSeparator = keccak256(abi.encode(EIP712_DOMAIN_TYPEHASH, keccak256('zkSync'), keccak256('2'), _getChainId()));\n\n\t\treturn keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n\t}\n\n\t/// @notice encode hash of the legacy transaction type.\n\t/// @return keccak256 of the serialized RLP encoded representation of transaction\n\tfunction _encodeHashLegacyTx(Transaction calldata _transaction) private view returns (bytes32) {\n\t\t// Hash of legacy transactions are encoded as one of the:\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data, chainId, 0, 0)\n\t\t// - RLP(nonce, gasPrice, gasLimit, to, value, data)\n\t\t//\n\t\t// In this RLP encoding, only one higher list appears, so we encode each element\n\t\t// inside list and then concatenate the length of all elements with them.\n\n\t\tbytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n\t\t// Encode `gasPrice` and `gasLimit` together to prevent \"stack too deep error\".\n\t\tbytes memory encodedGasParam;\n\t\t{\n\t\t\tbytes memory encodedGasPrice = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n\t\t\tbytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n\t\t\tencodedGasParam = bytes.concat(encodedGasPrice, encodedGasLimit);\n\t\t}\n\n\t\tbytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n\t\tbytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n\t\t// Encode only the length of the transaction data, and not the data itself,\n\t\t// so as not to copy to memory a potentially huge transaction data twice.\n\t\tbytes memory encodedDataLength;\n\t\t{\n\t\t\tuint256 txDataLen = _transaction.data.length;\n\t\t\tif (txDataLen != 1) {\n\t\t\t\t// If the length is not equal to one, then only using the length can it be encoded definitely.\n\t\t\t\tencodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n\t\t\t} else if (_transaction.data[0] >= 0x80) {\n\t\t\t\t// If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n\t\t\t\tencodedDataLength = hex'81';\n\t\t\t}\n\t\t\t// Otherwise the length is not encoded at all.\n\t\t}\n\n\t\t// Encode `chainId` according to EIP-155, but only if the `chainId` is specified in the transaction.\n\t\tbytes memory encodedChainId;\n\t\tif (_transaction.reserved[2] != 0) {\n\t\t\tencodedChainId = bytes.concat(RLPEncoder.encodeUint256(_getChainId()), hex'80_80');\n\t\t}\n\n\t\tbytes memory encodedListLength;\n\t\tunchecked {\n\t\t\tuint256 listLength = encodedNonce.length +\n\t\t\t\tencodedGasParam.length +\n\t\t\t\tencodedTo.length +\n\t\t\t\tencodedValue.length +\n\t\t\t\tencodedDataLength.length +\n\t\t\t\t_transaction.data.length +\n\t\t\t\tencodedChainId.length;\n\n\t\t\tencodedListLength = RLPEncoder.encodeListLen(listLength);\n\t\t}\n\n\t\treturn\n\t\t\tkeccak256(\n\t\t\t\tbytes.concat(\n\t\t\t\t\tencodedListLength,\n\t\t\t\t\tencodedNonce,\n\t\t\t\t\tencodedGasParam,\n\t\t\t\t\tencodedTo,\n\t\t\t\t\tencodedValue,\n\t\t\t\t\tencodedDataLength,\n\t\t\t\t\t_transaction.data,\n\t\t\t\t\tencodedChainId\n\t\t\t\t)\n\t\t\t);\n\t}\n\n    function _encodeHashEIP1559Tx(Transaction calldata _transaction) private view returns (bytes32) {\n        // Hash of EIP1559 transactions is encoded the following way:\n        // H(0x02 || RLP(chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, destination, amount, data, access_list))\n        // \n        // Note, that on zkSync access lists are not supported and should always be empty.\n\n        // Encode all fixed-length params to avoid \"stack too deep error\"\n        bytes memory encodedFixedLengthParams;\n        {\n            bytes memory encodedChainId = RLPEncoder.encodeUint256(_getChainId());\n            bytes memory encodedNonce = RLPEncoder.encodeUint256(_transaction.reserved[0]);\n            bytes memory encodedMaxPriorityFeePerGas = RLPEncoder.encodeUint256(_transaction.maxPriorityFeePerErg);\n            bytes memory encodedMaxFeePerGas = RLPEncoder.encodeUint256(_transaction.maxFeePerErg);\n            bytes memory encodedGasLimit = RLPEncoder.encodeUint256(_transaction.ergsLimit);\n            bytes memory encodedTo = RLPEncoder.encodeAddress(address(uint160(_transaction.to)));\n            bytes memory encodedValue = RLPEncoder.encodeUint256(_transaction.reserved[1]);\n            encodedFixedLengthParams = bytes.concat(\n                encodedChainId, \n                encodedNonce, \n                encodedMaxPriorityFeePerGas, \n                encodedMaxFeePerGas, \n                encodedGasLimit, \n                encodedTo, \n                encodedValue\n            );\n        }\n\n        // Encode only the length of the transaction data, and not the data itself,\n        // so as not to copy to memory a potentially huge transaction data twice.\n        bytes memory encodedDataLength;\n        {\n            uint256 txDataLen = _transaction.data.length;\n            if (txDataLen != 1) {\n                // If the length is not equal to one, then only using the length can it be encoded definitely.\n                encodedDataLength = RLPEncoder.encodeNonSingleBytesLen(txDataLen);\n            } else if (_transaction.data[0] >= 0x80) {\n                // If input is a byte in [0x80, 0xff] range, RLP encoding will concatenates 0x81 with the byte.\n                encodedDataLength = hex'81';\n            }\n            // Otherwise the length is not encoded at all.\n        }\n\n        // On zkSync, access lists are always zero length (at least for now).\n        bytes memory encodedAccessListLength = RLPEncoder.encodeListLen(0);\n\n        bytes memory encodedListLength;\n        unchecked {\n            uint256 listLength = \n                encodedFixedLengthParams.length +\n                encodedDataLength.length +\n                _transaction.data.length +\n                encodedAccessListLength.length;\n\n            encodedListLength = RLPEncoder.encodeListLen(listLength);\n        }\n\n        return\n            keccak256(\n                bytes.concat(\n                    '\\x02',\n                    encodedListLength,\n                    encodedFixedLengthParams,\n                    encodedDataLength,\n                    _transaction.data,\n                    encodedAccessListLength\n                )\n            );\n    }\n\n\tfunction _getChainId() internal view returns(uint256 chainId) { \n\t\tchainId = SYSTEM_CONTEXT_CONTRACT.chainId();\n\t}\n\n\tfunction processPaymasterInput(Transaction calldata _transaction) internal {\n\t\trequire(_transaction.paymasterInput.length >= 4, \"The standard paymaster input must be at least 4 bytes long\");\n\n\t\tbytes4 paymasterInputSelector = bytes4(_transaction.paymasterInput[0:4]);\n\t\tif (paymasterInputSelector == IPaymasterFlow.approvalBased.selector) {\n\t\t\t// While the actual data consists of address, uint256 and bytes data, \n\t\t\t// the data is needed only for the paymaster, so we ignore it here for the sake of optimization\n\t\t\t(address token, uint256 minAllowance) = abi.decode(_transaction.paymasterInput[4:68], (address, uint256));\n\t\t\taddress paymaster = address(uint160(_transaction.paymaster));\n\n\t\t\tuint256 currentAllowance = IERC20(token).allowance(address(this), paymaster);\n\t\t\tif (currentAllowance < minAllowance) {\n\t\t\t\t// Some tokens, e.g. USDT require that the allowance is firsty set to zero \n\t\t\t\t// and only then updated to the new value.\n\t\t\t\t\n\t\t\t\tIERC20(token).approve(paymaster, 0);\n\t\t\t\tIERC20(token).approve(paymaster, minAllowance);\n\t\t\t}\n\t\t} else if (paymasterInputSelector == IPaymasterFlow.general.selector) {\n\t\t\t// Do nothing. General(bytes) paymaster flow means that the paymaster must interpret these bytes on his own.\n\t\t} else {\n\t\t\trevert(\"Unsupported paymaster flow\");\n\t\t}\n\t}\n\n\tfunction payToTheBootloader(Transaction calldata _transaction) internal returns (bool success){\n\t\taddress bootloaderAddr = BOOTLOADER_FORMAL_ADDRESS;\n\t\tuint256 amount = _transaction.maxFeePerErg * _transaction.ergsLimit;\n\n\t\tassembly {\n\t\t\tsuccess := call(\n\t\t\t\tgas(),\n\t\t\t\tbootloaderAddr,\n\t\t\t\tamount,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t)\n\t\t}\n\t}\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\n/**\n * @author Matter Labs\n * @dev The interface that is used for encoding/decoding of \n * different types of paymaster flows.\n * @notice This is NOT an interface to be implementated\n * by contracts. It is just used for encoding.\n */\ninterface IPaymasterFlow {\n    function general(bytes calldata input) external;\n    function approvalBased(address _token, uint256 _minAllowance, bytes calldata _innerInput) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport '../TransactionHelper.sol';\n\nenum ExecutionResult {\n\tRevert,\n\tSuccess\n}\n\ninterface IPaymaster {\n\tfunction validateAndPayForPaymasterTransaction(Transaction calldata _transaction) external payable returns (bytes memory context);\n\n\t/// @dev Called by the bootloader after the execution of the transaction. Please note that \n\t/// there is no guarantee that this method will be called at all. Unlike the original EIP4337, \n\t/// this method won't be called if the transaction execution results in out-of-gas.\n\t/// @param _context, the context of the execution, returned by the \"validateAndPayForPaymasterTransaction\" method.\n\t/// @param  _transaction, the users' transaction.\n\t/// @param _txResult, the result of the transaction execution (success or failure).\n\t/// @param _maxRefundedErgs, the upper bound on the amout of ergs that could be refunded to the paymaster. \n\t/// @dev The exact amount refunded depends on the ergs spent by the \"postOp\" itself and so the developers should \n\t/// take that into account.\n\tfunction postOp(\n\t\tbytes calldata _context,\n\t\tTransaction calldata _transaction,\n\t\tExecutionResult _txResult,\n\t\tuint256 _maxRefundedErgs\n\t) external payable;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/SystemContext.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nimport \"./Constants.sol\";\n\n/**\n * @author Matter Labs\n * @notice Contract that stores some of the context variables, that may be either \n * block-scoped, tx-scoped or system-wide.\n */\ncontract SystemContext {\n    modifier onlyBootloader {\n        require(msg.sender == BOOTLOADER_FORMAL_ADDRESS);\n        _;\n    }\n    \n    uint256 public chainId = 270;\n    address public origin;\n    uint256 public ergsPrice;\n    // Some dummy value, maybe will be possible to change it in the future.\n    uint256 public blockErgsLimit = (1 << 30);\n    // For the support of coinbase, we will the bootloader formal address for now\n    address public coinbase = BOOTLOADER_FORMAL_ADDRESS;\n    // For consistency with other L2s\n    uint256 public difficulty = 2500000000000000;\n    uint256 public msize = (1 << 24);\n    uint256 public baseFee;\n    \n    uint256 constant BLOCK_INFO_BLOCK_NUMBER_PART = (1<<128);\n    // 2^128 * block_number + block_timestamp\n    uint256 public currentBlockInfo;\n\n    mapping(uint256 => bytes32) public blockHash;\n    \n    function getBlockHashEVM(uint256 _block) external view returns (bytes32 hash) {\n        if(block.number < _block || block.number - _block > 256) {\n            hash = bytes32(0);\n        } else {\n            hash = blockHash[_block];\n        }\n    }\n\n    function getBlockNumberAndTimestamp() public view returns (uint256 blockNumber, uint256 blockTimestamp) {\n        uint256 blockInfo = currentBlockInfo;\n        blockNumber = blockInfo / BLOCK_INFO_BLOCK_NUMBER_PART;\n        blockTimestamp = blockInfo % BLOCK_INFO_BLOCK_NUMBER_PART;\n    }\n\n    // Note, that for now, the implementation of the bootloader allows this variables to \n    // be incremented multiple times inside a block, so it should not relied upon right now.\n    function getBlockNumber() public view returns (uint256 blockNumber) {\n        (blockNumber, ) = getBlockNumberAndTimestamp();\n    }\n\n    function getBlockTimestamp() public view returns (uint256 timestamp) {\n        (, timestamp) = getBlockNumberAndTimestamp();\n    }\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IContractDeployer {\n    event ContractDeployed(address indexed deployerAddress, bytes32 indexed bytecodeHash, address indexed contractAddress);\n\n    function getNewAddressCreate2(\n        address _sender,\n        bytes32 _bytecodeHash,\n        bytes32 _salt,\n        bytes calldata _input\n    ) external pure returns (address newAddress);\n\n    function getNewAddressCreate(\n        address _sender,\n        uint256 _senderNonce\n    ) external pure returns (address newAddress);\n\n    function create2 (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n\n    function create2Account (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While the `_salt` parameter is not used anywhere here, \n    /// it is still needed for consistency between `create` and\n    /// `create2` functions (required by the compiler).\n    function create (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n\n    /// @dev While `_salt` is never used here, we leave it here as a parameter\n    /// for the consistency with the `create` function.\n    function createAccount (\n        bytes32 _salt,\n        bytes32 _bytecodeHash,\n        uint256 _value,\n        bytes calldata _input\n    ) external returns (address newAddress, bytes memory constructorRevertData);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface INonceHolder {\n    function getRawNonce(address _address) external view returns(uint256);\n\n    function getAccountNonce() external view returns (uint256);\n\n    function incrementNonce() external returns (uint256);\n\n    function incrementNonceIfEquals(uint256 _expectedNonce) external;\n\n    function getDeploymentNonce(address _address) external view returns (uint256);\n\n    function incrementDeploymentNonce(address _address) external returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IEthToken {\n    function balanceOf(address) external returns (uint256);\n    \n    function transferFromTo(address _from, address _to, uint256 _amount) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nstruct ImmutableData {\n    uint256 index;\n    bytes32 value;\n}\n\ninterface IImmutableSimulator {\n    function getImmutable(address _dest, uint256 _index) external view returns (bytes32);\n\n    function setImmutables(address _dest, ImmutableData[] calldata immutables) external;\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IL1Messenger {\n    // Possibly in the future we will be able to track the messages sent to L1 with \n    // some hooks in the VM. For now, it is much easier to track them with L2 events.\n    event L1MessageSent(address indexed _sender, bytes32 indexed _hash, bytes _message);\n\n    function sendToL1(bytes memory _message) external returns (bytes32);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\ninterface IAccountCodeStorage {\n    function storeCodeHash(address _address, bytes32 _hash) external;\n\n    function getRawCodeHash(address _address) external view returns (bytes32 codeHash);\n\n    function getCodeHash(uint256 _input) external returns (bytes32 codeHash);\n    \n    function getCodeSize(uint256 _input) external returns (uint256 codeSize);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nuint256 constant MAX_KNOWN_CODE_HASHES = 16;\ninterface IKnownCodesStorage {\n    function markAsKnownCandidates(bytes32[MAX_KNOWN_CODE_HASHES] calldata _hash) external;\n\n    function markAsRepublished(bytes32 _hash) external;\n\n    function removeUnusedKnownCandidate(bytes32 _hash) external;\n\n    function checkIfKnown(bytes32 _hash) external view returns (bool);\n\n    function getMarker(bytes32 _hash) external view returns (uint256);\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"content":"// SPDX-License-Identifier: MIT OR Apache-2.0\n\npragma solidity ^0.8.0;\n\nlibrary RLPEncoder {\n\tfunction encodeAddress(address _val) internal pure returns (bytes memory encoded) {\n\t\t// The size is equal to 14 bytes of the address itself + 1 for encoding bytes length in RLP.\n\t\tencoded = new bytes(0x15);\n\n\t\tbytes20 shiftedVal = bytes20(_val);\n\t\tassembly {\n\t\t\t// In the first byte we write the encoded length as 0x80 + 0x14 == 0x94.\n\t\t\tmstore(add(encoded, 0x20), 0x9400000000000000000000000000000000000000000000000000000000000000)\n\t\t\t// Write address data without stripping zeros.\n\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t}\n\t}\n\n\tfunction encodeUint256(uint256 _val) internal pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_val < 128) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\t// Handle zero as a non-value, since stripping zeroes results in an empty byte array\n\t\t\t\tencoded[0] = (_val == 0) ? bytes1(uint8(128)) : bytes1(uint8(_val));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_val);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(hbs + 0x81));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _val << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Encodes the size of bytes in RLP format.\n\t/// NOTE: panics if the length is 1, since the length encoding is ambiguous in this case.\n\tfunction encodeNonSingleBytesLen(uint256 _len) internal pure returns (bytes memory) {\n\t\tassert(_len != 1);\n\t\treturn _encodeLength(_len, 0x80);\n\t}\n\n\t/// @notice Encodes the size of list items in RLP format.\n\tfunction encodeListLen(uint256 _len) internal pure returns (bytes memory) {\n\t\treturn _encodeLength(_len, 0xc0);\n\t}\n\n\tfunction _encodeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory encoded) {\n\t\tunchecked {\n\t\t\tif (_len < 56) {\n\t\t\t\tencoded = new bytes(1);\n\t\t\t\tencoded[0] = bytes1(uint8(_len + _offset));\n\t\t\t} else {\n\t\t\t\tuint256 hbs = _highestByteSet(_len);\n\n\t\t\t\tencoded = new bytes(hbs + 2);\n\t\t\t\tencoded[0] = bytes1(uint8(_offset + hbs + 56));\n\n\t\t\t\tuint256 lbs = 31 - hbs;\n\t\t\t\tuint256 shiftedVal = _len << (lbs * 8);\n\n\t\t\t\tassembly {\n\t\t\t\t\tmstore(add(encoded, 0x21), shiftedVal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// @notice Computes the index of the highest byte set in number.\n\t/// @notice Uses little endian ordering (The least significant byte has index `0`).\n\t/// NOTE: returns `0` for `0`\n\tfunction _highestByteSet(uint256 _number) private pure returns (uint256 hbs) {\n\t\t// TODO: for optimization, the comparison can be replaced with bitwise operations\n\t\t// should be resolver after evaluating the cost of opcodes.\n\t\tif (_number >= 2**128) {\n\t\t\t_number >>= 128;\n\t\t\thbs += 16;\n\t\t}\n\t\tif (_number >= 2**64) {\n\t\t\t_number >>= 64;\n\t\t\thbs += 8;\n\t\t}\n\t\tif (_number >= 2**32) {\n\t\t\t_number >>= 32;\n\t\t\thbs += 4;\n\t\t}\n\t\tif (_number >= 2**16) {\n\t\t\t_number >>= 16;\n\t\t\thbs += 2;\n\t\t}\n\t\tif (_number >= 2**8) {\n\t\t\thbs += 1;\n\t\t}\n\t}\n}\n"},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"}},"settings":{"optimizer":{"enabled":true},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata"],"":["ast"]}}}},"output":{"errors":[],"sources":{},"contracts":{"@matterlabs/zksync-contracts/l2/system-contracts/RLPEncoder.sol":{"RLPEncoder":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"00000024011001970000002504000041000000000014037600000026010000410000000000210376000000000130004c000000080000613d008b00090000034f008b00200000034f0000008001000039000000400200003900000000001203760000000001000357000000000110004c0000001e0000c13d00000026010000410000000001010375000000000110004c000000170000c13d000000800100003900000000020000190000000003000019008b007c0000034f0000002001000039000000270200004100000000001203760000002801000041000000000001037600000029010000410000008c0001037000000000010000190000008d0001037200020000000000020000000001000350000080020210008c0000003d0000613d0000000002000351000080010220008c0000003d0000613d0000002a020000410000002b0300004100000000002303760000002c02000041000000000012037600008002010000390000002d020000410000000003000356000000020330008a00000020033000c9008b003f0000034f000000ff01000039000000010110024f000000000110004c0000003b0000613d0000002e01000041000000020110017f0000000001010378000000000110004c0000003d0000c13d00000000010000190000008c0001037000000000010000190000008d000103720002000000000002000200000003001d0000002003300039000100000003001d00000058002103650000000205000029000000200250011a000000000201001f0000000106000029000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a00000030021001cd00000000010500190000000200000005000000000001036f0000000103000029000000020500002900000000020000190000000102004039000000010220018f000000000220004c000000720000c13d000000200250011a000000000201001f0000000006030019000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a0000002f0210019d00000000010500190000000200000005000000000001036f0000000000010371000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000840000613d00000000002103760000002001100039000000010440008a000000000540004c0000007f0000c13d0000001f0330018f000000000430004c0000008a0000613d0000000303300210008b00730000034f000000000001036f000000000001036f0000008b000003740000008c000103700000008d00010372000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc00000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e000200000000000000000000000000000000000000000000000400000000000e000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000000000000000000000000000000000000000fff8000000000000000000000000000000000000000000000000000000000000fff8040000000000000000000000000000000000000000000000240000000000fff800000000000000000000000000000000000000000000000000ffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0031c15a88ae13121bf6eb00e038667e1abbcba4207c0bb59a26ceec467d8646"}},"@matterlabs/zksync-contracts/l2/system-contracts/SystemContext.sol":{"SystemContext":{"abi":[{"inputs":[],"name":"baseFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"blockErgsLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"blockHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"coinbase","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentBlockInfo","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"difficulty","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ergsPrice","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_block","type":"uint256"}],"name":"getBlockHashEVM","outputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumber","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockNumberAndTimestamp","outputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"uint256","name":"blockTimestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getBlockTimestamp","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"msize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"0105b5fe1c3e5a4f7e07cdc33029b3b98b97dcddc4b15a1751eb5a1bda62ca45"}},"@matterlabs/zksync-contracts/l2/system-contracts/TransactionHelper.sol":{"TransactionHelper":{"abi":[],"evm":{"legacyAssembly":null,"bytecode":{"object":"00000024011001970000002504000041000000000014037600000026010000410000000000210376000000000130004c000000080000613d008b00090000034f008b00200000034f0000008001000039000000400200003900000000001203760000000001000357000000000110004c0000001e0000c13d00000026010000410000000001010375000000000110004c000000170000c13d000000800100003900000000020000190000000003000019008b007c0000034f0000002001000039000000270200004100000000001203760000002801000041000000000001037600000029010000410000008c0001037000000000010000190000008d0001037200020000000000020000000001000350000080020210008c0000003d0000613d0000000002000351000080010220008c0000003d0000613d0000002a020000410000002b0300004100000000002303760000002c02000041000000000012037600008002010000390000002d020000410000000003000356000000020330008a00000020033000c9008b003f0000034f000000ff01000039000000010110024f000000000110004c0000003b0000613d0000002e01000041000000020110017f0000000001010378000000000110004c0000003d0000c13d00000000010000190000008c0001037000000000010000190000008d000103720002000000000002000200000003001d0000002003300039000100000003001d00000058002103650000000205000029000000200250011a000000000201001f0000000106000029000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a00000030021001cd00000000010500190000000200000005000000000001036f0000000103000029000000020500002900000000020000190000000102004039000000010220018f000000000220004c000000720000c13d000000200250011a000000000201001f0000000006030019000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a0000002f0210019d00000000010500190000000200000005000000000001036f0000000000010371000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000000840000613d00000000002103760000002001100039000000010440008a000000000540004c0000007f0000c13d0000001f0330018f000000000430004c0000008a0000613d0000000303300210008b00730000034f000000000001036f000000000001036f0000008b000003740000008c000103700000008d00010372000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc00000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e000200000000000000000000000000000000000000000000000400000000000e000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000000000000000000000000000000000000000fff8000000000000000000000000000000000000000000000000000000000000fff8040000000000000000000000000000000000000000000000240000000000fff800000000000000000000000000000000000000000000000000ffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"0031c15a88ae13121bf6eb00e038667e1abbcba4207c0bb59a26ceec467d8646"}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IAccountCodeStorage.sol":{"IAccountCodeStorage":{"abi":[{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_input","type":"uint256"}],"name":"getCodeSize","outputs":[{"internalType":"uint256","name":"codeSize","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawCodeHash","outputs":[{"internalType":"bytes32","name":"codeHash","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"},{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"storeCodeHash","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IContractDeployer.sol":{"IContractDeployer":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"deployerAddress","type":"address"},{"indexed":true,"internalType":"bytes32","name":"bytecodeHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"contractAddress","type":"address"}],"name":"ContractDeployed","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"create2Account","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"createAccount","outputs":[{"internalType":"address","name":"newAddress","type":"address"},{"internalType":"bytes","name":"constructorRevertData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"uint256","name":"_senderNonce","type":"uint256"}],"name":"getNewAddressCreate","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_sender","type":"address"},{"internalType":"bytes32","name":"_bytecodeHash","type":"bytes32"},{"internalType":"bytes32","name":"_salt","type":"bytes32"},{"internalType":"bytes","name":"_input","type":"bytes"}],"name":"getNewAddressCreate2","outputs":[{"internalType":"address","name":"newAddress","type":"address"}],"stateMutability":"pure","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IEthToken.sol":{"IEthToken":{"abi":[{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"transferFromTo","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IImmutableSimulator.sol":{"IImmutableSimulator":{"abi":[{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getImmutable","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dest","type":"address"},{"components":[{"internalType":"uint256","name":"index","type":"uint256"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"internalType":"struct ImmutableData[]","name":"immutables","type":"tuple[]"}],"name":"setImmutables","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IKnownCodesStorage.sol":{"IKnownCodesStorage":{"abi":[{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"checkIfKnown","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"getMarker","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[16]","name":"_hash","type":"bytes32[16]"}],"name":"markAsKnownCandidates","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"markAsRepublished","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"}],"name":"removeUnusedKnownCandidate","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IL1Messenger.sol":{"IL1Messenger":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"_hash","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"_message","type":"bytes"}],"name":"L1MessageSent","type":"event"},{"inputs":[{"internalType":"bytes","name":"_message","type":"bytes"}],"name":"sendToL1","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/INonceHolder.sol":{"INonceHolder":{"abi":[{"inputs":[],"name":"getAccountNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"getRawNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_address","type":"address"}],"name":"incrementDeploymentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"incrementNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_expectedNonce","type":"uint256"}],"name":"incrementNonceIfEquals","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol":{"IPaymaster":{"abi":[{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"}]}},"@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol":{"IPaymasterFlow":{"abi":[{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_minAllowance","type":"uint256"},{"internalType":"bytes","name":"_innerInput","type":"bytes"}],"name":"approvalBased","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"input","type":"bytes"}],"name":"general","outputs":[],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":""}},"factoryDependencies":{},"hash":"029facd4e5c9c489a79f51613ece4c2a57e33359f25b7f20e0d199a20a2769c6"}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[]}},"contracts/MyERC20.sol":{"MyERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"00000296011001970000029704000041000000000014037600000298010000410000000000210376000000000130004c000000080000613d0a5200090000034f0a5202d50000034f00120000000000020000008001000039000000400800003900000000001803760000000001000357000000000110004c000000300000c13d000002980100004100000000030103750000001f01300039000000200900008a000000000291016f000000000b0803750000000001b20019000000000221004b00000000020000190000000102004039000002990410009c000000320000213d000000010220018f000000000220004c000000320000c13d000000000018037600000298010000410000000001010375000000000110004c000000390000c13d00000000010b00190000000002000019000400000008001d000500000009001d000a0000000b001d000900000003001d0a520a430000034f00000009030000290000000a0b00002900000005090000290000000408000029000000570000013d000000000100001900000a5400010372000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a54000103720000001f0130018f000002970200004100000000020203750000000507300270000000000470004c000000480000613d0000000004000019000000050540021000000000065b00190000000005520019000000000505037700000000005603760000000104400039000000000574004b000000400000413d000000000410004c000000570000613d000000000493016f000000000242001900000000054b00190000000301100210000000000405037500000000041401cf000000000414022f00000000020203770000010001100089000000000212022f00000000011201cf000000000141019f00000000001503760000029a010000410000005f0230008c000000000200001900000000020120190000029a05300197000000000450004c00000000010080190000029a0450009c000000000102c019000000000110004c000000640000c13d000000000100001900000a540001037200000000020b03750000029b0120009c000000690000413d000000000100001900000a540001037200000000013b00190000000002b200190000001f032000390000029a04000041000000000513004b000000000500001900000000050440190000029a033001970000029a06100197000000000763004b000000000400a019000000000363013f0000029a0330009c00000000030500190000000003046019000000000330004c000000840000613d00000000030203750000029b0430009c000000860000413d000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a5400010372000000000100001900000a54000103720000003f04300039000000000494016f000000000a08037500000000044a00190000000005a4004b00000000050000190000000105004039000002990640009c0000009a0000213d000000010550018f000000000550004c0000009a0000c13d000000000048037600000000003a037600000020043000390000000005240019000000000515004b000000a10000a13d000000000100001900000a5400010372000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a5400010372000000000530004c000000ab0000613d000000000500001900000020055000390000000006a50019000000000725001900000000070703750000000000760376000000000635004b000000a40000413d0000000002a4001900000000000203760000002002b0003900000000020203750000029b0320009c000000b30000413d000000000100001900000a54000103720000000002b200190000001f032000390000029a04000041000000000513004b000000000500001900000000050440190000029a033001970000029a06100197000000000763004b000000000400a019000000000363013f0000029a0330009c00000000030500190000000003046019000000000330004c000000cd0000613d00000000030203750000029b0430009c000000cf0000413d000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a5400010372000000000100001900000a54000103720000003f04300039000000000494016f00000000070803750000000004470019000000000574004b00000000050000190000000105004039000002990640009c000000e30000213d000000010550018f000000000550004c000000e30000c13d0000000000480376000000000037037600000020043000390000000005240019000000000115004b000000ea0000a13d000000000100001900000a5400010372000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a540001037200070000000a001d000500000009001d000400000008001d000000000130004c000000f70000613d000000000100001900000020011000390000000005710019000000000621001900000000060603750000000000650376000000000531004b000000f00000413d000300000007001d000000000174001900000000000103760000004001b000390000000001010375000200000001001d000001000110008c000001010000413d000000000100001900000a540001037200000007010000290000000001010375000100000001001d0000029b0110009c0000010d0000413d000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a54000103720000000301000039000800000001001d0a520a380000034f000000010210018f00000001011002700000007f0310018f000000000420004c0000000001036019000a00000001001d0000001f0110008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b000001270000613d000002a1010000410000000000100376000000220100003900000004020000390000000000120376000002a20100004100000a54000103720000000a01000029000000200110008c0000014f0000413d0000000801000029000000000010037600008010010000390000029c020000410000000003000356000000120330008a00000020033000c90a520a020000034f00000012020000290000029901200197000000ff03000039000000110330024f000000000330004c000001c70000613d00000001030000290000001f023000390000000502200270000000200330008c000000000200401900000000010103780000000a030000290000001f03300039000000050330027000000000033100190000000002210019000900000003001d000000000132004b0000014f0000813d000a00000002001d00000000010000190000000a020000290a520a360000034f0000000a0200002900000001022000390000000901000029000000000112004b000001460000413d00000001010000290000001f0110008c000001900000a13d0000000801000029000000000010037600008010010000390000029c020000410000000003000356000000100330008a00000020033000c90a520a020000034f00000010020000290000029901200197000000ff030000390000000f0330024f000000010330008c000001e50000c13d00000005020000290000000103000029000000000223016f00000020040000390000000003010378000600000002001d000000000120004c00000007010000290000017c0000613d0000002004000039000900000000001d000800000004001d000a00000003001d0000000701000029000000000114001900000000010103750000000a020000290a520a360000034f00000008040000290000000a0300002900000020044000390000000103300039000000090200002900000020022000390000000601000029000900000002001d000000000112004b0000016b0000413d00000001010000290000000602000029000000000112004b0000018c0000813d00000001010000290000000301100210000000f80110018f000000010200008a000000000112022f000000000121013f000000070200002900000000022400190000000002020375000000000112016f00000000020300190a520a360000034f0000000101000039000000010200002900000001022002100000019e0000013d0000000101000029000000000110004c0000000001000019000001970000613d00000007010000290000002001100039000000000101037500000001040000290000000302400210000000010300008a000000000223022f000000000232013f000000000221016f0000000101400210000000000112019f00000003020000390a520a360000034f00000003010000290000000001010375000600000001001d000002990110009c000001ad0000a13d000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a54000103720000000401000039000800000001001d0a520a380000034f000000010210018f00000001011002700000007f0310018f000000000420004c0000000001036019000a00000001001d0000001f0110008c00000000010000190000000101002039000000010110018f000000000220004c0000000002000019000000010200c039000000010220018f000000000112004b000002030000613d000002a1010000410000000000100376000000220100003900000008020000290000000000120376000002a20100004100000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000001d60000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000001cf0000413d000000000540004c000001e30000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000001f40000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000001ed0000413d000000000540004c000002010000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a54000103720000000a01000029000000200110008c0000022b0000413d0000000801000029000000000010037600008010010000390000029c0200004100000000030003560000000e0330008a00000020033000c90a520a020000034f0000000e020000290000029901200197000000ff030000390000000d0330024f000000000330004c000002990000613d00000006030000290000001f023000390000000502200270000000200330008c000000000200401900000000010103780000000a030000290000001f03300039000000050330027000000000033100190000000002210019000900000003001d000000000132004b0000022b0000813d000a00000002001d00000000010000190000000a020000290a520a360000034f0000000a0200002900000001022000390000000901000029000000000112004b000002220000413d00000006010000290000001f0110008c0000026c0000a13d0000000801000029000000000010037600008010010000390000029c0200004100000000030003560000000c0330008a00000020033000c90a520a020000034f0000000c020000290000029901200197000000ff030000390000000b0330024f000000010330008c000002b70000c13d00000005020000290000000603000029000000000223016f00000020040000390000000003010378000700000002001d000000000120004c0000000301000029000002580000613d0000002004000039000900000000001d000800000004001d000a00000003001d0000000301000029000000000114001900000000010103750000000a020000290a520a360000034f00000008040000290000000a0300002900000020044000390000000103300039000000090200002900000020022000390000000701000029000900000002001d000000000112004b000002470000413d00000006010000290000000702000029000000000112004b000002680000813d00000006010000290000000301100210000000f80110018f000000010200008a000000000112022f000000000121013f000000030200002900000000022400190000000002020375000000000112016f00000000020300190a520a360000034f0000000101000039000000060200002900000001022002100000027a0000013d0000000601000029000000000110004c0000000001000019000002730000613d00000003010000290000002001100039000000000101037500000006040000290000000302400210000000010300008a000000000223022f000000000232013f000000000221016f00000001014002100000000203000029000000ff0330018f000a00000003001d000000000112019f00000004020000390a520a360000034f0000000501000039000900000001001d0a520a380000034f000001000200008a000000000121016f0000000a02000029000000000121019f00000009020000290a520a360000034f00000298010000410000000001010375000000000110004c000002920000c13d00000004010000290000000001010375000000000200001900000000030000190a520a430000034f00000020010000390000029e0200004100000000001203760000029f010000410000000000010376000002a00100004100000a530001037000000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000002a80000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000002a10000413d000000000540004c000002b50000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000002c60000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000002bf0000413d000000000540004c000002d30000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200200000000000020000000001000351000800000001001d0000000001000350000080020210008c000002f20000613d0000000802000029000080010220008c000002f20000613d000002a302000041000002a4030000410000000000230376000002a50200004100000000001203760000800201000039000002a6020000410000000003000356000000200330008a00000020033000c90a520a020000034f000000ff010000390000001f0110024f000000000110004c000003d10000613d0000029901000041000000200110017f0000000001010378000000000110004c000003d10000613d001e00400000003d00000080030000390000004001000039000500000001001d000000000031037600000298010000410000000001010375000000030110008c000003cf0000a13d001d00000000001d000002970100004100000000010103750000000001010377000000e001100270000002a70210009c000003600000c13d0000000001000357000000000110004c000004150000c13d00000298010000410000000001010375000000040110008a0000029a020000410000005f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000004170000613d0000029701000041000000000101037500000004021000390000000003020377000002b60230009c000004190000813d00000024021000390000000002020377000200000002001d000002b60220009c0000041b0000813d00000044011000390000000001010377000700000001001d000600000003001d000000000030037600000001010000390000002002000039000100000001001d000400000002001d00000000001203760000801001000039000002b70200004100000000030003560000001c0330008a00000020033000c90a520a020000034f0000001c020000290000029901200197000000ff03000039000300000003001d0000001b0330024f000000010330008c0000041d0000c13d00000000010103780000001d020000290000000803000029000000000032037600000004030000290000000000130376000002b702200041000080100100003900000000030003560000001a0330008a00000020033000c90a520a020000034f0000001a0200002900000299012001970000000303000029000000190330024f000000000330004c0000043b0000613d00000000010103780a520a380000034f000000010200008a000000000221004b0000000703000029000003560000613d000000000231004b0000000002030019000004590000413d0000000003210049000000060100002900000008020000290a5209530000034f0000000703000029000000060100002900000002020000290a5208490000034f000000050100002900000000010103750000000102000029000000000021037600000299011001970000029c011001c700000a5300010370000002a80210009c000003800000a13d000002a90210009c0000039d0000213d000002ad0210009c000004690000613d000002ae0210009c0000047d0000613d000002af0110009c000003cf0000c13d0000000001000357000000000110004c000004c30000c13d00000298010000410000000001010375000000040110008a000000010200008a0000029a03000041000000000221004b000000000200001900000000020320190000029a011001970000029a0410009c00000000030080190000029a011001670000029a0110009c00000000010200190000000001036019000000000110004c000005120000c13d000000000100001900000a5400010372000700000003001d000002b00210009c000003b70000a13d000002b10210009c000003d30000613d000002b20210009c000003e90000613d000002b30110009c000003cf0000c13d0000000001000357000000000110004c000004b90000c13d00000298010000410000000001010375000000040110008a0000029a020000410000003f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000004cf0000c13d000000000100001900000a5400010372000002aa0210009c000004910000613d000002ab0210009c000004a50000613d000002ac0110009c000003cf0000c13d0000000001000357000000000110004c000004c50000c13d00000298010000410000000001010375000000040110008a0000029a020000410000003f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c0000052f0000c13d000000000100001900000a5400010372000002b40210009c000003ff0000613d000002b50110009c000003cf0000c13d0000000001000357000000000110004c000004bb0000c13d00000298010000410000000001010375000000040110008a0000029a020000410000003f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000004d80000c13d000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a53000103700000000001000357000000000110004c000004bd0000c13d00000298010000410000000001010375000000040110008a000000010200008a0000029a03000041000000000221004b000000000200001900000000020320190000029a011001970000029a0410009c00000000030080190000029a011001670000029a0110009c00000000010200190000000001036019000000000110004c000004e70000c13d000000000100001900000a54000103720000000001000357000000000110004c000004bf0000c13d00000298010000410000000001010375000000040110008a000000010200008a0000029a03000041000000000221004b000000000200001900000000020320190000029a011001970000029a0410009c00000000030080190000029a011001670000029a0110009c00000000010200190000000001036019000000000110004c000004ef0000c13d000000000100001900000a54000103720000000001000357000000000110004c000004c10000c13d00000298010000410000000001010375000000040110008a000000010200008a0000029a03000041000000000221004b000000000200001900000000020320190000029a011001970000029a0410009c00000000030080190000029a011001670000029a0110009c00000000010200190000000001036019000000000110004c000004f80000c13d000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c0000042c0000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000004250000413d000000000540004c000004390000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c0000044a0000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000004430000413d000000000540004c000004570000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a5400010372000000050100002900000000010103750000004402100039000002c203000041000000000032037600000024021000390000001d030000390000000000320376000002ba0200004100000000002103760000000402100039000000040300002900000000003203760000029901100197000002c1011001c700000a54000103720000000001000357000000000110004c000004c70000c13d00000298010000410000000001010375000000040110008a0000029a020000410000003f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000005370000c13d000000000100001900000a54000103720000000001000357000000000110004c000004c90000c13d00000298010000410000000001010375000000040110008a0000029a020000410000001f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000005400000c13d000000000100001900000a54000103720000000001000357000000000110004c000004cb0000c13d00000298010000410000000001010375000000040110008a0000029a020000410000003f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000005480000c13d000000000100001900000a54000103720000000001000357000000000110004c000004cd0000c13d00000298010000410000000001010375000000040110008a0000029a020000410000003f0310008c000000000300001900000000030220190000029a01100197000000000410004c00000000020080190000029a0110009c00000000010300190000000001026019000000000110004c000005510000c13d000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a5400010372000000000100001900000a54000103720000029701000041000000000101037500000004011000390000000001010377000700000001001d000002b60110009c000005600000413d000000000100001900000a54000103720a5208400000034f0000029702000041000000000202037500000024022000390000000003020377000000000201001900000008010000290a5209530000034f000000050100002900000000010103750000000102000039000000000021037600000299011001970000029c011001c700000a530001037000000002010000390a520a380000034f00000005020000290000000002020375000000000012037600000299012001970000029c011001c700000a530001037000000005010000390a520a380000034f00000005020000290000000002020375000000ff0110018f000000000012037600000299012001970000029c011001c700000a53000103700000000301000039000800000001001d0a520a380000034f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b0000059c0000613d000002a1010000410000000000100376000000220100003900000004020000390000000000120376000002a20100004100000a540001037200000005010000290000000001010375000400000001001d0000000401000039000300000001001d0a520a380000034f000000010210018f00000001031002700000007f0430018f000000000520004c000000000304601900000000050300190000001f0330008c00000000030000190000000103002039000000010330018f000000000420004c0000000004000019000000010400c039000000010440018f000000000334004b000005a80000613d000002a1010000410000000000100376000000220100003900000003020000290000000000120376000002a20100004100000a54000103720000029701000041000000000201037500000004012000390000000001010377000002b60310009c000005b60000413d000000000100001900000a54000103720000029701000041000000000101037500000004021000390000000002020377000800000002001d000002b60220009c000005bd0000413d000000000100001900000a54000103720000029701000041000000000101037500000004011000390000000001010377000002b60210009c000005d00000413d000000000100001900000a54000103720000029701000041000000000101037500000004021000390000000002020377000700000002001d000002b60220009c000005e70000413d000000000100001900000a54000103720a5208400000034f0000029702000041000000000202037500000024022000390000000003020377000000000201001900000008010000290a5208490000034f000000050100002900000000010103750000000102000039000000000021037600000299011001970000029c011001c700000a53000103700000000801000029000000000010037600000001010000390000002002000039000300000001001d000600000002001d00000000001203760000801001000039000002b7020000410000000003000356000000180330008a00000020033000c90a520a020000034f00000018020000290000029901200197000000ff03000039000400000003001d000000170330024f000000010330008c0000062a0000c13d00000000010103780000001d02000029000000070300002900000000003203760000000603000029000000000013037600000005010000290000001e011001ef000000000221001900008010010000390000000003000356000000160330008a00000020033000c90a520a020000034f000000160200002900000299012001970000000403000029000000150330024f000000000330004c000007340000613d00000000010103780a520a380000034f00000297020000410000000002020375000000240220003900000000020203770000000003120019000000000123004b00000000010000190000000101004039000000010110018f000000000110004c000007b30000613d000002a1010000410000000000100376000000110100003900000004020000390000000000120376000002a20100004100000a540001037200000007030000290000000000530376000000000220004c000006480000c13d000001000200008a000000000121016f000000a0020000390000000000120376000000000150004c000000c001000039000000a0010060390000065e0000013d00000004030000290000000000530376000000000220004c000006780000c13d000001000200008a000000000121016f000000040200002900000020022000390000000000120376000000000150004c00000020010000390000000001006019000800000001001d000006910000013d00000024022000390000000002020377000800000002001d000002b60220009c000006b50000413d000000000100001900000a54000103720000000802000029000000000220004c000006e30000c13d000000050100002900000000010103750000004402100039000002c003000041000000000032037600000024021000390000001f030000390000000000320376000002ba0200004100000000002103760000000402100039000000200300003900000000003203760000029901100197000002c1011001c700000a54000103720000000000100376000000200100003900000000000103760000801001000039000002b7020000410000000003000356000000120330008a00000020033000c90a520a020000034f00000012020000290000029901200197000000ff03000039000000110330024f000000010330008c000006f80000c13d00000000010103780a520a380000034f0000001e020000290000000002020375000000000012037600000299012001970000029c011001c700000a530001037000000024011000390000000001010377000300000001001d0000000801000029000000000010037600000001020000390000002001000039000600000001001d000200000002001d00000000002103760000801001000039000002b7020000410000000003000356000000100330008a00000020033000c90a520a020000034f00000010020000290000029901200197000000ff03000039000400000003001d0000000f0330024f000000010330008c000007160000c13d00000000010103780000001d02000029000000070300002900000000003203760000000603000029000000000013037600000005010000290000001e011001ef0000000002210019000080100100003900000000030003560000000e0330008a00000020033000c90a520a020000034f0000000e02000029000002990120019700000004030000290000000d0330024f000000000330004c000007520000613d00000000010103780a520a380000034f0000000302000029000000000221004b000007bd0000813d0000001e0100002900000000010103750000006402100039000002b80300004100000000003203760000004402100039000002b9030000410000000000320376000000240210003900000025030000390000000000320376000002ba0200004100000000002103760000000402100039000000060300002900000000003203760000029901100197000002bb011001c700000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000006390000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000006320000413d000000000540004c000006460000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000008010000290000000000100376000000a003000039000000000150004c0000066c0000613d000002c3030000410000000001000019000600000005001d000800000003001d000700000001001d00000000010300190a520a380000034f00000007040000290000000803000029000000a0024000390000000000120376000000010330003900000020014000390000000602000029000000000221004b000006500000413d000000c0014000390000001f01100039000000200200008a000000000121016f0000000003010019000000800110008a000002c40110009c0000066c0000a13d000002a1010000410000000000100376000000410100003900000004020000390000000000120376000002a20100004100000a54000103720000000501000029000800000003001d0000000000310376000000800200003900000000010300190a5208290000034f000000080200002900000000012100490000004001100210000002bd01100197000000000121019f00000a53000103700000001d0200002900000003010000290000000000120376000800000002001d000600000005001d000000000152004b000006910000813d00000004010000290000002001100039000500000001001d000002bc02000041000700000002001d00000000010200190a520a380000034f0000000803000029000000050200002900000000023200190000000000120376000000070200002900000001022000390000002003300039000800000003001d0000000601000029000000000113004b000006830000413d00000008010000290000003f01100039000000200200008a000000000121016f00000004020000290000000002210019000000000112004b000000000100001900000001010040390000000003020019000002990220009c000006ac0000213d000000010110018f000000000110004c000006ac0000c13d0000001e01000029000800000003001d0000000000310376000000000103001900000004020000290a5208290000034f000000080200002900000000012100490000004001100210000002bd01100197000000000121019f00000a53000103700000001d01000029000002a10200004100000000002103760000004102000039000000030300002900000000002303760000029901100197000002a2011001c700000a5400010372000000000010037600000001010000390000002002000039000700000002001d00000000001203760000801001000039000002b70200004100000000030003560000000c0330008a00000020033000c90a520a020000034f0000000c020000290000029901200197000000ff03000039000600000003001d0000000b0330024f000000010330008c000007700000c13d00000000010103780000001d02000029000000080300002900000000003203760000000703000029000000000013037600000005010000290000001e011001ef0000000002210019000080100100003900000000030003560000000a0330008a00000020033000c90a520a020000034f0000000a0200002900000299012001970000000603000029000000090330024f000000000330004c000007c90000613d00000000010103780a520a380000034f0000001e020000290000000002020375000000000012037600000299012001970000029c011001c700000a530001037000000024011000390000000001010377000700000001001d00000002010000390a520a380000034f000000000201001900000007010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c0000078e0000613d000002a1010000410000000000100376000000110100003900000004020000390000000000120376000002a20100004100000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000007070000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000007000000413d000000000540004c000007140000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000007250000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b0000071e0000413d000000000540004c000007320000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000007430000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b0000073c0000413d000000000540004c000007500000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000007610000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b0000075a0000413d000000000540004c0000076e0000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c0000077f0000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000007780000413d000000000540004c0000078c0000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000002020000390a520a360000034f00000008010000290000000000100376000000200100003900000000000103760000801001000039000002b7020000410000000003000356000000140330008a00000020033000c90a520a020000034f00000014020000290000029901200197000000ff03000039000000130330024f000000010330008c000007e70000c13d0000000001010378000600000001001d0a520a380000034f000000000201001900000007010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c000008050000613d000002a1010000410000000000100376000000110100003900000004020000390000000000120376000002a20100004100000a5400010372000000080100002900000007020000290a5209530000034f0000001e0100002900000000010103750000000302000029000000000021037600000299011001970000029c011001c700000a530001037000000003020000290000000003210049000000080100002900000007020000290a5209530000034f0000001e0100002900000000010103750000000202000029000000000021037600000299011001970000029c011001c700000a530001037000000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000007d80000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000007d10000413d000000000540004c000007e50000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000007f60000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000007ef0000413d000000000540004c000008030000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000006020000290a520a360000034f0000001e010000290000000001010375000000070200002900000000002103760000001d02000029000002be03000041000002bf0400004100000000003403600000000803000029000000000032035f000000210200008a000000000221004b000008220000213d00000020021000390000081a0000013d000000000003035f0000004001100039000000000312004b000008220000a13d000000000412004900000000030103750000003f0440008c000008160000a13d00000020041000390000000004040375000000000043035f000008170000013d0000001e0100002900000000010103750000000102000039000000000021037600000299011001970000029c011001c700000a5300010370000000200300003900000000003103760000000003020375000000200410003900000000003403760000004001100039000000000430004c000008390000613d000000000400001900000000054100190000002004400039000000000624001900000000060603750000000000650376000000000534004b000008320000413d000000000231001900000000000203760000001f02300039000000200300008a000000000232016f0000000001210019000000000001036f0000029701000041000000000101037500000004011000390000000001010377000002b60210009c000008470000813d000000000001036f000000000100001900000a5400010372000c000000000002000002c504100197000000000140004c000008b90000613d000600000003001d000002c501200197000300000001001d000000000110004c000008cc0000613d000400000004001d00000000004003760000002001000039000200000001001d00000000000103760000801001000039000002b70200004100000000030003560000000c0330008a00000020033000c90a520a020000034f0000000c020000290000029901200197000000ff03000039000500000003001d0000000b0330024f000000010330008c000008df0000c13d00000000010103780a520a380000034f00000000020100190000000601000029000100000002001d000000000112004b000008fd0000413d00000004010000290000000000100376000000020100002900000000000103760000801001000039000002b70200004100000000030003560000000a0330008a00000020033000c90a520a020000034f0000000a0100002900000299021001970000000503000029000000090330024f000000010330008c000009100000c13d00000006010000290000000103000029000000000113004900000000020203780a520a360000034f000000030100002900000000001003760000801001000039000002b7020000410000000003000356000000080330008a00000020033000c90a520a020000034f000000080200002900000299012001970000000503000029000000070330024f000000000330004c0000092e0000613d0000000001010378000500000001001d0a520a380000034f000000000201001900000006010000290000000001120019000000000221004b00000000020000190000000102004039000000010220018f000000000220004c0000094c0000c13d00000005020000290a520a360000034f0000004001000039000000000101037500000006020000290000000000210376000002be02000041000002bf03000041000000000023036000000004020000290000000303000029000000000032035f000000210200008a000000000221004b000008b70000213d0000002002100039000008af0000013d000000000003035f0000004001100039000000000312004b000008b70000a13d000000000412004900000000030103750000003f0440008c000008ab0000a13d00000020041000390000000004040375000000000043035f000008ac0000013d0000000c00000005000000000001036f000000400100003900000000010103750000006402100039000002ca0300004100000000003203760000004402100039000002cb030000410000000000320376000000240210003900000025030000390000000000320376000002ba0200004100000000002103760000000402100039000000200300003900000000003203760000029901100197000002bb011001c700000a5400010372000000400100003900000000010103750000006402100039000002c80300004100000000003203760000004402100039000002c9030000410000000000320376000000240210003900000023030000390000000000320376000002ba0200004100000000002103760000000402100039000000200300003900000000003203760000029901100197000002bb011001c700000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000008ee0000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000008e70000413d000000000540004c000008fb0000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a5400010372000000400100003900000000010103750000006402100039000002c60300004100000000003203760000004402100039000002c7030000410000000000320376000000240210003900000026030000390000000000320376000002ba0200004100000000002103760000000402100039000000020300002900000000003203760000029901100197000002bb011001c700000a540001037200000040011002700000029d031001970000001f0410018f00000299011001970000000505100270000000000650004c0000091f0000613d000000000600001900000005076002100000000008720019000000000808037800000000008703760000000106600039000000000756004b000009180000413d000000000540004c0000092c0000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000232001900000000020203780000010004400089000000000242022f00000000024201cf000000000252019f0000000000230376000000400110021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c0000093d0000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000009360000413d000000000540004c0000094a0000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a5400010372000002a1010000410000000000100376000000110100003900000004020000390000000000120376000002a20100004100000a54000103720009000000000002000500000003001d000002c503100197000000000130004c000009a00000613d000002c501200197000400000001001d000000000110004c000009b30000613d000100000003001d000000000030037600000001010000390000002002000039000300000002001d00000000001203760000801001000039000002b7020000410000000003000356000000090330008a00000020033000c90a520a020000034f00000009020000290000029901200197000000ff03000039000200000003001d000000080330024f000000010330008c000009c60000c13d000000000101037800000004020000290000000000200376000000030200002900000000001203760000801001000039000002b7020000410000000003000356000000070330008a00000020033000c90a520a020000034f000000070200002900000299012001970000000203000029000000060330024f000000000330004c000009e40000613d000000000201037800000005010000290a520a360000034f0000004001000039000000000101037500000005020000290000000000210376000002cc02000041000002bf03000041000000000023036000000001020000290000000403000029000000000032035f000000210200008a000000000221004b0000099e0000213d0000002002100039000009960000013d000000000003035f0000004001100039000000000312004b0000099e0000a13d000000000412004900000000030103750000003f0440008c000009920000a13d00000020041000390000000004040375000000000043035f000009930000013d0000000900000005000000000001036f000000400100003900000000010103750000006402100039000002cf0300004100000000003203760000004402100039000002d0030000410000000000320376000000240210003900000024030000390000000000320376000002ba0200004100000000002103760000000402100039000000200300003900000000003203760000029901100197000002bb011001c700000a5400010372000000400100003900000000010103750000006402100039000002cd0300004100000000003203760000004402100039000002ce030000410000000000320376000000240210003900000022030000390000000000320376000002ba0200004100000000002103760000000402100039000000200300003900000000003203760000029901100197000002bb011001c700000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000009d50000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000009ce0000413d000000000540004c000009e20000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a540001037200000040022002700000029d032001970000001f0420018f00000299022001970000000505200270000000000650004c000009f30000613d000000000600001900000005076002100000000008710019000000000808037800000000008703760000000106600039000000000756004b000009ec0000413d000000000540004c00000a000000613d0000000304400210000000000503037500000000054501cf000000000545022f000000000131001900000000010103780000010004400089000000000141022f00000000014101cf000000000151019f0000000000130376000000400120021000000a54000103720002000000000002000200000003001d0000002003300039000100000003001d00000a1b002103650000000205000029000000200250011a000000000201001f0000000106000029000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a0000029a021001cd00000000010500190000000200000005000000000001036f0000000103000029000000020500002900000000020000190000000102004039000000010220018f000000000220004c00000a350000c13d000000200250011a000000000201001f0000000006030019000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a000002d10210019d00000000010500190000000200000005000000000001036f0000000000010371000000000012035b000000000001036f0000000001010359000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c00000a4b0000613d00000000002103760000002001100039000000010440008a000000000540004c00000a460000c13d0000001f0330018f000000000430004c00000a510000613d00000003033002100a520a3a0000034f000000000001036f000000000001036f00000a520000037400000a530001037000000a5400010372000000000000e001000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc0000000000000000000000000000000000000000000000000ffffffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000ffffffffffffffe00000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e000200000000000000000000000000000000000000000000000400000000000e000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000000000000000000000000000000000000000fff8000000000000000000000000000000000000000000000000000000000000fff8040000000000000000000000000000000000000000000000240000000000fff8000000000000000000000000000000000000000000000000000000000023b872dd0000000000000000000000000000000000000000000000000000000040c10f1800000000000000000000000000000000000000000000000000000000a457c2d600000000000000000000000000000000000000000000000000000000a457c2d700000000000000000000000000000000000000000000000000000000a9059cbb00000000000000000000000000000000000000000000000000000000dd62ed3e0000000000000000000000000000000000000000000000000000000040c10f190000000000000000000000000000000000000000000000000000000070a082310000000000000000000000000000000000000000000000000000000095d89b410000000000000000000000000000000000000000000000000000000018160ddc0000000000000000000000000000000000000000000000000000000018160ddd00000000000000000000000000000000000000000000000000000000313ce56700000000000000000000000000000000000000000000000000000000395093510000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000095ea7b300000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000207a65726f00000000000000000000000000000000000000000000000000000045524332303a2064656372656173656420616c6c6f77616e63652062656c6f7708c379a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008400000000000000008a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b00000000000000000000000000000000ffffffffffffffff0000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef000000000000000000000000000000000000000000000000000000200000000345524332303a206d696e7420746f20746865207a65726f206164647265737300000000000000000000000000000000000000000000000064000000000000000045524332303a20696e73756666696369656e7420616c6c6f77616e6365000000c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b000000000000000000000000000000000000000000000000ffffffffffffff7f000000000000000000000000ffffffffffffffffffffffffffffffffffffffff616c616e6365000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220616d6f756e7420657863656564732062657373000000000000000000000000000000000000000000000000000000000045524332303a207472616e7366657220746f20746865207a65726f2061646472647265737300000000000000000000000000000000000000000000000000000045524332303a207472616e736665722066726f6d20746865207a65726f2061648c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925737300000000000000000000000000000000000000000000000000000000000045524332303a20617070726f766520746f20746865207a65726f206164647265726573730000000000000000000000000000000000000000000000000000000045524332303a20617070726f76652066726f6d20746865207a65726f206164647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000"}},"factoryDependencies":{},"hash":"02d330e085c6f44face7a8be0e8535a9fbddcd1e3e6f0ddf9911580108b1cf80"}},"contracts/MyPaymaster.sol":{"MyPaymaster":{"abi":[{"inputs":[{"internalType":"address","name":"_erc20","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"allowedToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_context","type":"bytes"},{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"},{"internalType":"enum ExecutionResult","name":"_txResult","type":"uint8"},{"internalType":"uint256","name":"_maxRefundedErgs","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"txType","type":"uint256"},{"internalType":"uint256","name":"from","type":"uint256"},{"internalType":"uint256","name":"to","type":"uint256"},{"internalType":"uint256","name":"ergsLimit","type":"uint256"},{"internalType":"uint256","name":"ergsPerPubdataByteLimit","type":"uint256"},{"internalType":"uint256","name":"maxFeePerErg","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerErg","type":"uint256"},{"internalType":"uint256","name":"paymaster","type":"uint256"},{"internalType":"uint256[6]","name":"reserved","type":"uint256[6]"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32[]","name":"factoryDeps","type":"bytes32[]"},{"internalType":"bytes","name":"paymasterInput","type":"bytes"},{"internalType":"bytes","name":"reservedDynamic","type":"bytes"}],"internalType":"struct Transaction","name":"_transaction","type":"tuple"}],"name":"validateAndPayForPaymasterTransaction","outputs":[{"internalType":"bytes","name":"context","type":"bytes"}],"stateMutability":"payable","type":"function"},{"stateMutability":"payable","type":"receive"}],"evm":{"legacyAssembly":null,"bytecode":{"object":"00000077011001970000007804000041000000000014037600000079010000410000000000210376000000000130004c000000080000613d01d500090000034f01d500740000034f00020000000000020000000001000357000000000110004c0000001c0000c13d000000790100004100000000030103750000009f02300039000000200100008a000000000212016f000000800420008a0000007a0440009c0000001e0000413d000000810100004100000000001003760000004101000039000000040200003900000000001203760000008201000041000001d7000103720000000001000019000001d7000103720000004004000039000000000024037600000079020000410000000002020375000000000220004c000200000004001d0000002b0000c13d00000080010000390000000002000019000100000003001d01d501c60000034f0000000103000029000000490000013d0000001f0230018f000000780400004100000000080403750000000504300270000000000540004c0000003a0000613d0000000005000019000000050650021000000000076800190000000007070377000000800660003900000000007603760000000105500039000000000645004b000000320000413d000000000420004c000000490000613d000000000113016f000000000518001900000003022002100000008001100039000000000401037500000000042401cf000000000424022f00000000050503770000010002200089000000000525022f00000000022501cf000000000242019f00000000002103760000007b010000410000001f0230008c000000000200001900000000020120190000007b03300197000000000430004c00000000010080190000007b0330009c000000000102c019000000000110004c000000560000c13d0000000001000019000001d700010372000000800100003900000000020103750000007c0120009c0000005c0000413d0000000001000019000001d7000103720000000001000019000100000002001d01d501bb0000034f0000007d011001970000000102000029000000000121019f000000000200001901d501b90000034f00000079010000410000000001010375000000000110004c0000006d0000c13d000000020100002900000000010103750000000002000019000000000300001901d501c60000034f00000020010000390000007e0200004100000000001203760000007f0100004100000000000103760000008001000041000001d6000103700003000000000002000000000b0003510000000001000350000080020210008c000000930000613d0000800102b0008c000000930000613d00000083020000410000008403000041000000000023037600000085020000410000000000120376000080020100003900000086020000410000000003000356000000030330008a00000020033000c900010000000b001d01d501850000034f000000010b000029000000ff01000039000000020110024f000000000110004c000000910000613d0000008701000041000000030110017f0000000001010378000000000110004c000000930000c13d0000000001000019000001d6000103700000008003000039000000400c00003900000000003c037600000079010000410000000002010375000000030120008c000000b20000a13d000000780100004100000000010103750000000004010377000000e004400270000000880540009c000000b80000613d000000890340009c000000c60000613d0000008a0340009c000000b60000c13d000000040320008a0000007b040000410000007f0530008c000000000500001900000000050420190000007b06300197000000000760004c00000000040080190000007b0660009c000000000405c019000000000440004c000000e40000c13d0000000001000019000001d700010372000000000120004c000000b60000c13d0000000001000019000001d6000103700000000001000019000001d700010372000000040220008a0000007b040000410000001f0520008c000000000500001900000000050420190000007b06200197000000000760004c00000000040080190000007b0660009c000000000405c019000000000440004c000000dc0000c13d0000000001000019000001d7000103720000000001000357000000000110004c000000e20000c13d00000079010000410000000001010375000000040110008a000000010200008a0000007b03000041000000000221004b000000000200001900000000020320190000007b011001970000007b0410009c00000000030080190000007b011001670000007b0110009c00000000010200190000000001036019000000000110004c000000ea0000c13d0000000001000019000001d700010372000000040110003900000000010103770000008b0410009c000000f40000413d0000000001000019000001d7000103720000000001000019000001d700010372000000040510003900000000040503770000008b0640009c000001030000413d0000000001000019000001d700010372000000000100001900010000000c001d01d501bb0000034f000000010200002900000000020203750000008c01100197000000000012037600000087012001970000008d011001c7000001d60001037000000000011200490000007b020000410000025f0410008c000000000400001900000000040220190000007b01100197000000000510004c00000000020080190000007b0110009c00000000010400190000000001026019000000000110004c000001180000c13d0000000001000019000001d70001037200000023064000390000007b07000041000000000826004b000000000800001900000000080740190000007b092001970000007b06600197000000000a96004b000000000700a019000000000696013f0000007b0660009c00000000060800190000000006076019000000000660004c000001330000613d000000000545001900000000050503770000008b0650009c000001450000413d0000000001000019000001d7000103720000800101b0008c000001350000c13d0000002001000039000000000013037600000060010000390000000001010375000000a0020000390000000000120376000000000210004c0000012a0000613d000000000200001900000080032000390000000003030375000000c00420003900000000003403760000002002200039000000000312004b000001230000413d000000c00210003900000000000203760000004001100210000000920110004100000093011001970000009401100041000000930110019700000080011001bf000001d6000103700000000001000019000001d7000103720000008e0100004100000000001303760000002001000039000000840200003900000000001203760000002401000039000000a40200003900000000001203760000008f01000041000000c40200003900000000001203760000009001000041000000e40200003900000000001203760000009101000041000001d70001037200000000045400190000002404400039000000000224004b0000014b0000a13d0000000001000019000001d700010372000000240210003900000000020203770000008b0420009c000001510000413d0000000001000019000001d70001037200000000022300490000007b030000410000025f0420008c000000000400001900000000040320190000007b02200197000000000520004c00000000030080190000007b0220009c00000000020400190000000002036019000000000220004c000001600000c13d0000000001000019000001d70001037200000044011000390000000001010377000000020110008c000001660000413d0000000001000019000001d7000103720000800101b0008c0000000001000019000000010100603900010000000c001d01d5016f0000034f000000010100002900000000010103750000008701100197000001d600010370000000000110004c000001720000613d000000000001036f0000004001000039000000000101037500000064021000390000009003000041000000000032037600000044021000390000008f0300004100000000003203760000002402100039000000240300003900000000003203760000008e020000410000000000210376000000040210003900000020030000390000000000320376000000870110019700000095011001c7000001d7000103720002000000000002000200000003001d0000002003300039000100000003001d0000019e002103650000000205000029000000200250011a000000000201001f0000000106000029000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a0000007b021001cd00000000010500190000000200000005000000000001036f0000000103000029000000020500002900000000020000190000000102004039000000010220018f000000000220004c000001b80000c13d000000200250011a000000000201001f0000000006030019000000202160011a000000000126004900000003022002100000010003200089000000200110011a000000010331025f000000000101003100000000042101cf000000000343019f000000000220004c000000000103c019000000200260011a000000960210019d00000000010500190000000200000005000000000001036f0000000000010371000000000012035b000000000001036f0000000001010359000000000001036f000000000401037500000000043401cf000000000434022f0000010003300089000000000232022f00000000023201cf000000000242019f0000000000210376000000000001036f0000000504300270000000000540004c000001ce0000613d00000000002103760000002001100039000000010440008a000000000540004c000001c90000c13d0000001f0330018f000000000430004c000001d40000613d000000030330021001d501bd0000034f000000000001036f000000000001036f000001d500000374000001d600010370000001d700010372000000000000e001000000000000e001000000000000e001000000000000e0010000000000000000000000000000000000000000000000000000000000ffffff0000000000000000000000000000000000000000000000000000000000ffffe00000000000000000000000000000000000000000000000000000000000ffffc0000000000000000000000000000000000000000000000000ffffffffffffff8080000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000e000200000000000000000000000000000000000000000000000400000000000e000004e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002400000000000000001806aa1896bbf26568e884a7374b41e002500962caba6a15023a8d90e8508b830000000000000000000000000000000000000000000000000000000000fff8000000000000000000000000000000000000000000000000000000000000fff8040000000000000000000000000000000000000000000000240000000000fff800000000000000000000000000000000000000000000000000ffffffffffffffff000000000000000000000000000000000000000000000000000000007cd676990000000000000000000000000000000000000000000000000000000085fa292f00000000000000000000000000000000000000000000000000000000a0c8bb4c0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffff000000000000000000000000000000000000000000000020000000000000000008c379a0000000000000000000000000000000000000000000000000000000004f6e6c7920626f6f746c6f616465722063616e2063616c6c2074686973206d6574686f6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084000000000000008000000000000000000000000000000000000000000000001f000000000000000000000000000000000000000000000000ffffffffffffffe00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008400000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}},"factoryDependencies":{},"hash":"0097472a9003f4ffd6590fb7797f9a9b630c021dbe8b2a61239212610e433507"}}}}}